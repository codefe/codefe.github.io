{"sta":1,"data":{"subTitle":"Worker API","content":"<p>浏览器原生提供Worker()构造函数，用来供主线程生成 Worker 线程。</p><p><blockquote>var myWorker = new Worker(jsUrl, options);\n</blockquote>Worker()构造函数，可以接受两个参数。第一个参数是脚本的网址（必须遵守同源政策），该参数是必需的，且只能加载 JS 脚本，否则会报错。第二个参数是配置对象，该对象可选。它的一个作用就是指定 Worker 的名称，用来区分多个 Worker 线程。<br><blockquote>// 主线程<br>\nvar myWorker = new Worker('worker.js', { name : 'myWorker' });\n<br>// Worker 线程<br>\nself.name // myWorker\n</blockquote>\nWorker()构造函数返回一个 Worker 线程对象，用来供主线程操作 Worker。Worker 线程对象的属性和方法如下。<br><blockquote>Worker.onerror：指定 error 事件的监听函数。<br>\nWorker.onmessage：指定 message 事件的监听函数，发送过来的数据在Event.data属性中。<br>\nWorker.onmessageerror：指定 messageerror 事件的监听函数。发送的数据无法序列化成字符串时，会触发这个事件。<br>\nWorker.postMessage()：向 Worker 线程发送消息。<br>\nWorker.terminate()：立即终止 Worker 线程。</blockquote></p><p>Web Worker 有自己的全局对象，不是主线程的window，而是一个专门为 Worker 定制的全局对象。因此定义在window上面的对象和方法不是全部都可以使用。</p><p>Worker 线程有一些自己的全局属性和方法。</p><pre><code>self.name： Worker 的名字。该属性只读，由构造函数指定。\nself.onmessage：指定message事件的监听函数。\nself.onmessageerror：指定 messageerror 事件的监听函数。发送的数据无法序列化成字符串时，会触发这个事件。\nself.close()：关闭 Worker 线程。\nself.postMessage()：向产生这个 Worker 线程发送消息。\nself.importScripts()：加载 JS 脚本。</code></pre><p><br></p>"}}