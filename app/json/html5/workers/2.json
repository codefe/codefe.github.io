{"sta":1,"data":{"subTitle":"Worker主线程用法","content":"<p>主线程采用new命令，调用Worker()构造函数，新建一个 Worker 线程。</p><blockquote>&nbsp;var worker = new Worker('work.js');</blockquote><p>Worker()构造函数的参数是一个脚本文件，该文件就是 Worker 线程所要执行的任务。由于 Worker 不能读取本地文件，所以这个脚本必须来自网络。如果下载没有成功（比如404错误），Worker 就会默默地失败。<br>然后，主线程调用worker.postMessage()方法，向 Worker 发消息。<br><blockquote>worker.postMessage('Hello World');<br>\nworker.postMessage({method: 'echo', args: ['Work']});\n</blockquote>worker.postMessage()方法的参数，就是主线程传给 Worker 的数据。它可以是各种数据类型，包括二进制数据。\n<br>\n<br>接着，主线程通过worker.onmessage指定监听函数，接收子线程发回来的消息。<br><blockquote>worker.onmessage = function (event) {<br>\n  console.log('Received message ' + event.data);<br>\n  doSomething();<br>\n}\n<br>function doSomething() {<br>\n  // 执行任务<br>\n  worker.postMessage('Work done!');<br>\n}\n</blockquote>\n上面代码中，事件对象的data属性可以获取 Worker 发来的数据。<br>Worker 完成任务以后，主线程就可以把它关掉。<br><blockquote>worker.terminate();</blockquote></p>"}}