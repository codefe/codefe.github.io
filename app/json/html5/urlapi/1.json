{"sta":1,"data":{"subTitle":"URL API","content":"<p>URL API是一个URL标准的组件，它定义了有效的Uniform Resource Locator和访问、操作URL的API。URL标准还定义了像域名、主机和IP地址等概念，并尝试以标准的方式去描述用于以键/值对的形式提交web表单内容的遗留application/x-www-form-urlencoded MIME type 。</p><p><h3>URL的概念和用法\n</h3>URL标准的主要内容是由URL的定义以及它的结构和解析方式决定的。还介绍了与网络上计算机寻址有关的各种术语的定义，并指定了解析IP地址和DOM地址的算法。大多数开发人员更感兴趣的是API本身。\n<br>\n<br><h3>使用URL组件\n</h3>给指定的URL创建一个 URL 对象将解析URL并通过其属性对其组成部分的快速访问。</p><pre><code>let addr = new URL(\"https://developer.mozilla.org/en-US/docs/Web/API/URL_API\");\nlet host = addr.host;\nlet path = addr.pathname;</code></pre><p>上面的代码片段为您正在阅读的文章创建一个URL对象，然后获取 host 和 pathname 属性。在本例中，这些字符串的值分别是developer.mozilla.org 和/en-US/docs/Web/API/URL_API。</p><p><h3>修改URL\n</h3>URL对象的大部分属性都是可设置的；您可以向它们写入新值来更改对象所表示的URL。例如，要创建一个URL对象并设置它的用户名：</p><pre><code>let myUsername = \"someguy\";\nlet addr = new URL(\"https://mysite.com/login\");\naddr.username = myUsername;</code></pre><p>设置 username 值不仅是设置该属性的值，而且更新整个URL。执行上面的代码片段后， addr.href 的返回值是https://someguy@mysite.com/login。对于任何可写属性都是如此。<br><h3>查询\n</h3> search 属性在URL上包含URL的查询字符串部分。例如，如果URL是https://mysite.com/login?user=someguy&amp;page=news，那么search 属性的值是?user=someguy&amp;page=news。您还可以使用 URLSearchParams 对象的 get() 查找单个参数的值：</p><pre><code>let addr = new URL(\"https://mysite.com/login?user=someguy&amp;page=news\");\ntry {\n  loginUser(addr.searchParams.get(\"user\"));\n  gotoPage(addr.searchParams.get(\"page\"));\n} catch(err) {\n  showErrorMessage(err);\n}</code></pre><p>例如，在上面的代码片段中，从查询中提取用户名和目标页面，并将其传递给适当的函数，站点代码使用这些函数登录并将用户路由到站点的目的页面。\n<br>\n<br>URLSearchParams中的其他函数允许修改改、添加和删除键和值，甚至对参数列表进行排序。</p><p><h3>例子\n</h3>如果希望处理URL中包含的参数，可以手动进行处理，但是创建一个URL对象更容易。下面的fillTableWithParameters()函数接受一个表示&lt;table&gt;的   HTMLTableElement 对象作为输入。将行添加到表中，每个行对应参数中找到的键，第一列包含键，第二列包含值。\n<br>\n<br>注意，在生成表之前调用  URLSearchParams.sort() 对参数列表进行排序。</p><pre><code>function fillTableWithParameters(tbl) {\n  let url = new URL(document.location.href);\n  url.searchParams.sort();\n  let keys = url.searchParams.keys();\n\n  for (let key of keys) {\n    let val = url.searchParams.get(key);\n    let row = document.createElement(\"tr\");\n    let cell = document.createElement(\"td\");\n    cell.innerText = key;\n    row.appendChild(cell);\n    cell = document.createElement(\"td\");\n    cell.innerText = val;\n    row.appendChild(cell);\n    tbl.appendChild(row);\n  };\n}</code></pre><p><br></p>"}}