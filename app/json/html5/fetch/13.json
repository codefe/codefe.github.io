{"sta":1,"data":{"subTitle":"取消fetch请求","content":"<p><code>fetch()</code>请求发送以后，如果中途想要取消，需要使用<code>AbortController</code>对象。<br></p><pre><code>let controller = new AbortController();\nlet signal = controller.signal;\n\nfetch(url, {\n  signal: controller.signal\n});\n\nsignal.addEventListener('abort',\n  () =&gt; console.log('abort!')\n);\n\ncontroller.abort(); // 取消\n\nconsole.log(signal.aborted); // true</code></pre><p>上面示例中，首先新建 AbortController 实例，然后发送fetch()请求，配置对象的signal属性必须指定接收 AbortController 实例发送的信号controller.signal。\n<br>\n<br>controller.abort()方法用于发出取消信号。这时会触发abort事件，这个事件可以监听，也可以通过controller.signal.aborted属性判断取消信号是否已经发出。\n<br>\n<br>下面是一个1秒后自动取消请求的例子。</p><pre><code>let controller = new AbortController();\nsetTimeout(() =&gt; controller.abort(), 1000);\n\ntry {\n  let response = await fetch('/long-operation', {\n    signal: controller.signal\n  });\n} catch(err) {\n  if (err.name == 'AbortError') {\n    console.log('Aborted!');\n  } else {\n    throw err;\n  }\n}</code></pre><p><br></p>"}}