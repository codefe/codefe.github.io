{"sta":1,"data":{"subTitle":"服务端的实现","content":"<p>WebSocket 服务器的实现，可以查看维基百科的<a href=\"https://en.wikipedia.org/wiki/Comparison_of_WebSocket_implementations\" target=\"_blank\">列表</a>。</p><p>常用的 Node 实现有以下三种。</p><ol><li><a href=\"https://github.com/uWebSockets/uWebSockets\" target=\"_blank\">WebSockets</a></li><li><a href=\"http://socket.io/\" target=\"_blank\">Socket.IO</a></li><li><a href=\"https://github.com/theturtle32/WebSocket-Node\" target=\"_blank\">WebSocket-Node</a></li></ol><p></p><p>具体的用法请查看它们的文档，这里不详细介绍了。</p><h3>WebSocketd</h3><p>下面，我要推荐一款非常特别的 WebSocket 服务器：Websocketd。\n<br>\n<br>它的最大特点，就是后台脚本不限语言，标准输入（stdin）就是 WebSocket 的输入，标准输出（stdout）就是 WebSocket 的输出。</p><p>举例来说，下面是一个 Bash 脚本counter.sh。</p><pre><code>#!/bin/bash\n\necho 1\nsleep 1\n\necho 2\nsleep 1\n\necho 3</code></pre><p>命令行下运行这个脚本，会输出1、2、3，每个值之间间隔1秒。</p><pre><code>$ bash ./counter.sh\n1\n2\n3</code></pre><p>现在，启动websocketd，指定这个脚本作为服务。</p><pre><code>$ websocketd --port=8080 bash ./counter.sh</code></pre><p>上面的命令会启动一个 WebSocket 服务器，端口是8080。每当客户端连接这个服务器，就会执行counter.sh脚本，并将它的输出推送给客户端。</p><pre><code>var ws = new WebSocket('ws://localhost:8080/');\n\nws.onmessage = function(event) {\n  console.log(event.data);\n};</code></pre><p>上面是客户端的 JavaScript 代码，运行之后会在控制台依次输出1、2、3。\n<br>\n<br>有了它，就可以很方便地将命令行的输出，发给浏览器。</p><pre><code>$ websocketd --port=8080 ls</code></pre><p>上面的命令会执行ls命令，从而将当前目录的内容，发给浏览器。使用这种方式实时监控服务器，简直是轻而易举</p><p>Bash 脚本读取客户端输入的例子</p><pre><code>#!/bin/bash\n\n# Copyright 2013 Joe Walnes and the websocketd team.\n# All rights reserved.\n# Use of this source code is governed by a BSD-style\n# license that can be found in the LICENSE file.\n\n# For each line FOO received on STDIN, respond with \"Hello FOO!\".\nwhile read LINE\ndo\n\techo \"Hello $LINE!\"\ndone</code></pre><p>五行代码实现一个最简单的聊天服务器<br></p><pre><code>#!/bin/bash\n\n# Copyright 2013 Jeroen Janssens\n# All rights reserved.\n# Use of this source code is governed by a BSD-style\n# license that can be found in the LICENSE file.\n\n# Run a simple chat server: websocketd --devconsole --port 8080 ./chat.sh\n#\n# Please note that this example requires GNU tail, which is not the default\n# tail on OS X. Even though this script properly escapes the variables,\n# please keep in mind that it is in general a bad idea to read\n# untrusted data into variables and pass this onto the command line.\n\necho \"Please enter your name:\"; read USER\necho \"[$(date)] ${USER} joined the chat\" &gt;&gt; chat.log\necho \"[$(date)] Welcome to the chat ${USER}!\"\ntail -n 0 -f chat.log --pid=$$ | grep --line-buffered -v \"] ${USER}&gt;\" &amp;\nwhile read MSG; do echo \"[$(date)] ${USER}&gt; ${MSG}\" &gt;&gt; chat.log; done</code></pre><p>websocketd 的实质，就是命令行的 WebSocket 代理。只要命令行可以执行的程序，都可以通过它与浏览器进行 WebSocket 通信。下面是一个 Node 实现的回声服务greeter.js。<br></p><pre><code>process.stdin.setEncoding('utf8');\n\nprocess.stdin.on('readable', function() {\n  var chunk = process.stdin.read();\n  if (chunk !== null) {\n    process.stdout.write('data: ' + chunk);\n  }\n});</code></pre><p>启动这个脚本的命令如下。</p><pre><code>$ websocketd --port=8080 node ./greeter.js</code></pre><p><br></p>"}}