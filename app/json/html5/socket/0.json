{"sta":1,"data":{"subTitle":"WebSocket的JavaScript接口详解","content":"<p>如果我们想彻底的了解WebSocket，就必须先从它的接口定义学起。WebSocket和HTTP协议一样，都是基于TCP协议的，因此我们无需关注它们的握手协议，而只需关注实际应用的业务和相关接口的实现。<br>WebSocket在设计时，针对Web开发人员的WebSocket JavaScript客户端接口是非常简单的，以下是WebSocket JavaScript接口的定义：<br></p><pre><code>[Constructor(in DOMString url, in optional DOMString protocol)] \n interface WebSocket { \n   readonly attribute DOMString URL; \n        // ready state \n   const unsigned short CONNECTING = 0; \n   const unsigned short OPEN = 1; \n   const unsigned short CLOSED = 2; \n   readonly attribute unsigned short readyState; \n   readonly attribute unsigned long bufferedAmount; \n   //networking \n   attribute Function onopen; \n   attribute Function onmessage; \n   attribute Function onclose; \n   attribute Function onerror; \n   boolean send(in DOMString data); \n   void close(); \n }; \n WebSocket implements EventTarget;</code></pre><p><blockquote>URL：代表WebSocket服务器的网络地址，HTTP 协议开头一样，WebSocket协议的URL使用ws://开头，另外安全的WebSocket协议使用wss://开头。<br>\nonopen：当浏览器和WebSocketServer连接成功后，会触发onopen消息<br>\nonerror：如果连接失败，发送、接收数据失败或者处理数据出现错误，browser会触发onerror消息<br>\nonmessage：当Browser接收到WebSocketServer发送过来的数据时，就会触发onmessage消息<br>\nsend：方法就是发送数据到服务器端<br>\nonclose：当浏览器接收到WebSocketServer端发送的关闭连接请求时，就会触发onclose消息\n</blockquote>\n<br>重点：api所有的操作都是采用异步回调的方式触发，这样不会阻塞UI，可以获得更快的响应时间，更好的用户体验。</p><p>&nbsp;\n<br>主流的浏览器（包括PC和移动终端）现已都支持标准的HTML5的WebSocket API，这意味着客户端的WebSocket JavaScirpt脚本具备良好的一致性和跨平台特性。\n<br>WebSockets支持双向、全双工通信信道。只要我们通过HTTP请求（WebSockets的握手）成功，那么连接一直处于激活状态，我们就可以通过js脚本实时的和服务器进行交互。</p>"}}