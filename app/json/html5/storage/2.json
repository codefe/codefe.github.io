{"sta":1,"data":{"subTitle":"sessionStorage","content":"<p>存储在 sessionStorage 里面的数据在页面会话结束时会被清除。</p><p>页面会话在浏览器打开期间一直保持，并且重新加载或恢复页面仍会保持原来的页面会话。\n<br>在新标签或窗口打开一个页面时会复制顶级浏览会话的上下文作为新会话的上下文，这点和 session cookies 的运行方式不同。\n<br>打开多个相同的URL的Tabs页面，会创建各自的sessionStorage。\n<br>关闭对应浏览器窗口（Window）/ tab，会清除对应的sessionStorage。</p><h3>语法</h3><pre><code>// 保存数据到 sessionStorage\nsessionStorage.setItem('key', 'value');\n\n// 从 sessionStorage 获取数据\nlet data = sessionStorage.getItem('key');\n\n// 从 sessionStorage 删除保存的数据\nsessionStorage.removeItem('key');\n\n// 从 sessionStorage 删除所有保存的数据\nsessionStorage.clear();</code></pre><h3>返回值</h3><p>一个 Storage 对象。</p><h3>示例</h3><p>下面的代码访问当前域名的 session Storage 对象，并使用 Storage.setItem() 访问往里面添加一个数据条目。<br><blockquote>sessionStorage.setItem('myCat', 'Tom');\n</blockquote>下面的示例会自动保存一个文本输入框的内容，如果浏览器因偶然因素被刷新了，文本输入框里面的内容会被恢复，因此写入的内容不会丢失。</p><pre><code>// 获取文本输入框\nlet field = document.getElementById(\"field\");\n\n// 检测是否存在 autosave 键值\n// (这个会在页面偶然被刷新的情况下存在)\nif (sessionStorage.getItem(\"autosave\")) {\n  // 恢复文本输入框的内容\n  field.value = sessionStorage.getItem(\"autosave\");\n}\n\n// 监听文本输入框的 change 事件\nfield.addEventListener(\"change\", function() {\n  // 保存结果到 sessionStorage 对象中\n  sessionStorage.setItem(\"autosave\", field.value);\n});</code></pre><p><br></p>"}}