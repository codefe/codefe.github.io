{"sta":1,"data":{"subTitle":"Context","content":"<h3>理解</h3><p>一种组件间通信方式，常用于【祖组件】与【后代组件】间通信\n<br>\n如包含关系如下：A组件 =&gt; B组件 =&gt; C组件 =&gt; D组件</p><p>使用时要在A组件的【class之前】使用【第1步】，渲染子组件时再使用【第2步】，【第3步】是B,C,D哪个组件使用，就在哪个组件中使用，不要使用就不要做第3步。</p><p><h3>使用\n</h3>1. 创建Context容器对象(首字母大写)：\n<br><blockquote>    const XxxContext = React.createContext()\n</blockquote>\n<br>2. 在【祖组件】中渲染子组件时，外面包裹xxxContext.Provider，通过value属性给后代组件传递数据：\n<br><blockquote>    &lt;XxxContext.Provider value={数据}&gt;<br>\n&nbsp; &nbsp; 子组件<br>\n    &lt;/XxxContext&gt;\n</blockquote>\n<br>3. 后代组件读取数据：\n<br>    //第一种方式：仅适用于类组件\n<br><blockquote>    static contextType = XxxContext //声明接收context,哪个后代使用就在哪个组件中声明<br>\n    this.context //读取context中的value数据\n</blockquote>\n<br>    //第二种方式：函数与类组件都可以\n<br><blockquote>    &lt;XxxContext.Consumer&gt;<br>\n        {<br>\n&nbsp; &nbsp; value =&gt; (// value就是context中的value数据<br>\n&nbsp; &nbsp; &nbsp; &nbsp; return `要显示的内容`<br>\n&nbsp; &nbsp; &nbsp;)<br>\n        }<br>\n    &lt;/XxxContext.Consumer&gt;</blockquote></p><p><br></p><p><br></p>"}}