{"sta":1,"data":{"subTitle":"react优化,不使用内敛对象","content":"<pre>// OtherComponent.tsx ---&gt; 子组件\nimport React from \"react\"\n\nexport default class OtherComponent extends React.PureComponent {\n    render() {\n        const { style, extraProps } = this.props\n        return (\n            &lt;p style={style} &gt;{extraProps.title}&lt;/p&gt;\n        );\n    }\n}\n\n// index.tsx ---&gt; 父组件\nimport React from \"react\"\nimport OtherComponent from './OtherComponent'\n\nconst App = props =&gt; {\n    // props.title 为 String 类型\n    const extraProps = { title: props.title }\n    return &lt;OtherComponent\n        style={{ paddingTop: 10 }} // 这里相当于每次都new一个值\n        extraProps={extraProps}\n    /&gt;\n}</pre><p>从代码中我们可以看到，OtherComponent 是一个 PureComponent，会对传入的 props 进行浅比较，浅比较结果为 false 时才会触发重新 render。\n<br>\n<br>在 App 组件中，传入 OtherComponent 组件的 style 值为内敛对象 { paddingTop: 10 }， React 在每次渲染 App 组件时都会重新创建这个对象的引用，这就会导致 OtherComponent 把它当做是不同的对象，即浅比较结果为 false，于是会触发 OtherComponent 重新 render。而重新 render 会带来性能问题。</p><p><h3>首先我们先对style进行优化\n</h3>为了解决这个问题，我们可以在组件外只初始化一次对象，之后每次都指向相同的引用，这样 OtherComponent 浅比较结果为 true，就不会触发重新 render 了：</p><pre>import React from \"react\"\nimport OtherComponent from './OtherComponent'\n\n// 只初始化一次 styles 对象\nconst styles = { paddingTop: 10 }\nconst App = props =&gt; {\n    const extraProps = { title: props.title }\n    return &lt;OtherComponent\n        style={styles}  // 这里相当于每次都引入相同的引用\n        extraProps={extraProps}\n    /&gt;\n}</pre><p><h3>接下来我们再对extraProps进行优化\n</h3>另外，我们可以看到 OtherComponent 接收的 props 中还有对象 extraProps，也会出现上面多次创建对象引用的问题，但由于使用了 App 的 props.title 值，我们无法像上述的解决办法一样，在组件外初始化一次对象 extraProps。\n<br>\n<br>那么这时我们可以使用 ES6 扩展运算符，将 extraProps 对象解构，让 OtherComponent 接收到的 props 为基本类型 String，如果 props.title 的值没有变化，则通过浅比较一样不会触发 render：</p><pre>import React from \"react\"\nimport OtherComponent from './OtherComponent'\n\nconst styles = { paddingTop: 10 }\nconst App = props =&gt; {\n    // props.title 为 String 类型\n    const extraProps = { title: props.title }\n    return &lt;OtherComponent\n        style={styles}\n        {...extraProps} // 相当于变成了title={props.title}的形式传入OtherComponent\n    /&gt;\n}</pre><p><br></p>"}}