{"sta":1,"data":{"subTitle":"stateHook","content":"<p>1. State Hook让函数组件也可以有state状态，并进行状态数据的读写操作<br></p><p>2. 语法：&nbsp;</p><p><blockquote>const [xxx,setXxx] = React.useState(initValue)\n</blockquote>3. useState()说明：\n<br>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;参数：第一次初始化指定的值在内部作缓存\n<br>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;返回值：包含2个元素的数组，第1个为内部当前状态值，第2个为更新状态值的函数\n<br>4. setXxx()2种写法：\n<br>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setXxx(newValue): 参数为非函数值，直接指定新的状态值，内部用其覆盖原来的状态值\n<br>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setXxx(value=&gt;newValue): 参数为函数，接收原本的状态值，返回新的状态值，内部用其覆盖原来的状态值&nbsp;<br></p><p>例子：</p><pre>// 函数式组件\nfunction Demo(){\n    //底层作了处理,count会被缓存，不会被重新调用而被覆盖\n    const [count,setCount] = React.useState(0)\n    const [name,setName] = React.useState('tom')\n    //加的回调\n    function add(){\n        //写法一\n        setCount(count+1)\n        //写法二\n        setCount(count=&gt;count+1)\n    }\n    //改名回调\n    function changeName(){\n        setCount('jack')\n    }\n    return (\n        &lt;div&gt;\n            &lt;h2&gt;当前求和为：{count}&lt;/h2&gt;\n            &lt;button onClick={add}&gt;点我+1&lt;/button&gt;\n            &lt;h2&gt;我的名字是：{name}&lt;/h2&gt;\n            &lt;button onClick={changeName}&gt;点我改名&lt;/button&gt;\n        &lt;/div&gt;\n    )\n}\n\nexport default Demo</pre><p><br></p>"}}