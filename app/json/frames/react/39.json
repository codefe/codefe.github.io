{"sta":1,"data":{"subTitle":"React地图找房探索与实践","content":"<p>近年来，无论是电商物流行业还是房产交通行业，为了提升用户的体验，通过地图赋能的产品越来越多。最近恰好也在开发一个移动端地图找房相关的项目，使用的框架是React + React-BMap + 百度地图JavaScript API。 选择百度地图，是因为负责此项目的产品之前有使用百度地图开发过其他项目的经验。本文会和大家一起探讨在React框架基础上使用百度地图，以及在使用React-BMap组件库时遇到的问题，希望能给后续开发这类项目的同学一些经验。<br></p><p>在使用百度地图之前，我们需要先了解百度地图JavaScript API的使用方法，下图是官方给出的使用步骤。</p><pre>&lt;script type=\"text/javascript\" src=\"https://api.map.baidu.com/api?v=3.0&amp;ak=申请的密钥\"&gt;&lt;/script&gt;</pre><p>ak是你的项目申请的密钥，然后通过var BMap = window.BMap获取全局BMap对象。此时，可以通过var map = new BMap.Map('myMap')对地图进行实例化，其中myMap是加载地图的容器id。代码如下：</p><pre>let BMap = window.BMap; // 获取全局BMap对象\nlet map = new BMap.Map(\"myMap\"); // 创建Map实例</pre><p>因为在React环境下的Js文件中不能直接访问入口文件中的变量并且需要确保地图加载完成才能获取到地图实例。所以上述代码需要在组件的componentDidMount生命周期中执行。\n<br>\n<br>执行完上述代码后就可以使用BMap对象和地图实例对象map去调用百度地图各种API了。现在执行以下代码就可以将地图渲染到页面中。</p><pre>var map = new BMap.Map(\"myMap\"); // 创建Map实例\nmap.centerAndZoom(new BMap.Point(116.404, 39.915), 11);  // 初始化地图,设置中心点坐标和地图级别\nmap.addControl(new BMap.MapTypeControl({ // 添加地图类型控件\n    mapTypes:[ // 设置地图类型\n        BMAP_NORMAL_MAP,\n        BMAP_HYBRID_MAP\n    ]}));     \nmap.setCurrentCity(\"北京\"); // 设置地图显示的城市</pre><p>注意，初始化的坐标应与您设置的城市对应，否则地图将无法正常显示。\n<br>\n<br>代码执行成功后，一个以北京为中心点的地图就展现在我们面前。</p><p>现在简单解释一下上述初始化地图用到的api。new BMap.Point(lng, lat)：创建点坐标，lng表示经度，lat表示纬度；mapTypes：设置地图类型，百度地图提供了3种地图类型，分别是BMAP_NORMAL_MAP：展示普通街道视图，BMAP_SATELLITE_MAP：展示卫星视图 BMAP_HYBRID_MAP：展示卫星和路网的混合视图，默认使用普通街道视图。centerAndZoom：用来初始化地图，调用方式centerAndZoom(center: Point, zoom: Number)。center代表地图中心点，zoom代表地图层级。如果center类型为Point时，zoom必须赋值，范围3-19级，若调用高清底图（针对移动端开发）时，zoom可赋值范围为3-18级。如果center类型为字符串时，比如“北京”，zoom可以忽略，地图将自动根据center适配最佳zoom级别。\n<br>\n<br><h3>React-BMap方式使用\n</h3>在使用React-BMap之前，我们先来了解一下React-BMap的基本概念以及其具备的特性。React-BMap是基于百度地图JavaScript Api封装的React组件库。React-BMap只是利用了React组件的生命周期，来调用对应的百度地图JavaScript Api的方法，比如在componentDidMount和componentDidUpdate的时候在地图上添加覆盖物，componentWillUnmount的时候移除覆盖物，React对应的render渲染函数模块返回的是null。所以这里面地图相关的dom并不是react渲染的，真正创建地图之类的还是使用百度地图JavaScript Api，React-BMap只是利用了React组件的写法来封装百度地图JavaScript Api，使我们在使用React的时候能更方便的使用百度地图JavaScript Api。\n<br>\n<br>React-BMap的使用方式与其他组件没有太大区别，通过npm install react-bmap方式安装React-BMap文件包，通过Map组件初始化地图。代码如下：</p><pre>import {Map} from 'react-bmap';\n\nconst Map = ()= &gt;{\n    render(){\n        return (&lt;Map center={{lng: 116.402544, lat: 39.928216}} zoom=\"12\" /&gt;)\n    }\n}</pre><p>地图初始化完成以后，要想调用百度地图提供的api，我们还需要获取Map实例。代码如下：</p><pre>class MapView extends Component {\n  constructor(props) {\n    super(props);\n    this.map = React.createRef();\n  }\n\n   componentDidMount() {\n    let curMap = this.map.current.map; // BMap.Map实例，地图加载完成后可得\n  }\n\n  render(){\n      return (&lt;Map ref={this.map} center={{lng: 116.402544, lat: 39.928216}} zoom=\"12\"&gt;&lt;/Map&gt;)\n  }\n}</pre><p>这样我们就拿到了地图实例，并且通过传入地图中心点坐标和地图层级，将地图成功的渲染到页面中。\n<br>\n<br><h3>自定义覆盖物\n</h3>给地图添加覆盖物，其实就是在地图上添加一个标记。在创建标记之前，我们需要先了解覆盖物相关的api。Marker：此类表示地图上一个图像标注，通过var marker = new BMap.Marker(new BMap.Point(116.404, 39.915))即可创建一个图像标注实例；addOverlay：用于将覆盖物添加到地图中，一个覆盖物实例只能向地图中添加一次。通过以下代码，就成功得在地图上给北京市做了一个标记。</p><pre>var map = new BMap.Map(\"myMap\");\nvar point = new BMap.Point(116.404, 39.915);\n    map.centerAndZoom(point, 15);\n    var marker = new BMap.Marker(new BMap.Point(116.404, 39.915)); // 创建点\n    map.addOverlay(marker); // 添加覆盖物</pre><p>效果如下图：</p><p><img src=\"/app/json/frames/react/img/bmap1.jpg\" style=\"max-width:100%;\"></p><p>百度地图提供的覆盖物体样式单一，与页面设计风格不搭，此时就需要自定义覆盖物样式。现在，我们实现这样一个需求：以用户当前定位坐标点为地图中心点，并给这个点添加自定义覆盖物。\n<br>\n<br>对需求进行分解：先进行定位，然后再将这个点作为地图中心点，最后再给定位的点添加自定义覆盖物。目前，获取当前定位坐标的方式有两种，通过调用百度地图的getCurrentPosition方式和原生H5的方式。采用百度地图的getCurrentPosition方式返回用户当前的位置，会首先调用浏览器自带的定位接口。不管采用何种方式，都需要用户允许授权定位。因为百度地图的定位方式会出现偏差，为确保定位的稳定性和相对准确性，所以我们使用较成熟的原生H5的方式获取用户当前位置，代码如下：</p><pre>getLocalPosition = () =&gt; {\nreturn new Promise((resolve, reject) =&gt; {\n  navigator.geolocation.getCurrentPosition(\n    (position) =&gt; { // 定位成功的回调\n      resolve(position)\n    },\n    (err) =&gt; { // 定位失败的回调\n      reject(err)\n    },\n  )\n})\n}</pre><blockquote>注意，采用H5方式获取用户当前位置，只在https环境下有效，http和本地环境下均无效，并不会返回任何位置信息，控制台会给出错误提示</blockquote><p>下面是添加自定义覆盖物的代码：</p><pre>let map = new BMap.Map(\"allmap\");\nmap.centerAndZoom(new BMap.Point(116.3964,39.9093), 15);\n\n// 自定义覆盖物构造函数\nfunction ComplexCustomOverlay(point) {\n  this._point = point;\n}\n\n// 设置自定义覆盖物对象的prototype属性为Overlay的实例，以便继承覆盖物基类\nComplexCustomOverlay.prototype = new BMap.Overlay();\n\n// 初始化方法\nComplexCustomOverlay.prototype.initialize = function (map) {\n  this._map = map;\n  // 创建div元素，作为自定义覆盖物的容器\n  let div = this._div = document.createElement(\"div\");\n  div.style.position = \"absolute\";\n  div.style.height = \"30px\";\n  div.style.width = \"30px\";\n  // 自定义覆盖物图标\n  let arrow = this._arrow = document.createElement('img');\n  arrow.src = '//m.360buyimg.com/uba/jfs/t1/41780/27/4087/1330/5cd0fbbfEe037fa2c/f93e59379902c0d5.jpg';\n  arrow.style.width = '21px';\n  arrow.style.height = '28px';\n  arrow.style.top = \"22px\";\n  arrow.style.left = \"10px\";\n  div.appendChild(arrow);\n  curMap.getPanes().labelPane.appendChild(div);\n  return div;\n}\n\n// 绘制覆盖物，实现绘制方法\nComplexCustomOverlay.prototype.draw = function () {\n  let map = this._map;\n  let pixel = map.pointToOverlayPixel(this._point);\n  this._div.style.left = pixel.x - parseInt(this._arrow.style.left) + \"px\";\n  this._div.style.top = pixel.y - 30 + \"px\";\n}\n\n// 自定义覆盖物添加事件方法\nComplexCustomOverlay.prototype.addEventListener = function (event, fun) {\n  this._div['on' + event] = fun;\n}\n\n//将标注添加到地图中\nlet myCompOverlay = new ComplexCustomOverlay(new BMap.Point(position.coords.longitude, position.coords.latitude));\ncurMap.addOverlay(myCompOverlay);\nlet dealPoint = new BMap.Point(position.coords.longitude, position.coords.latitude);\nlet marker = new BMap.Marker(dealPoint);\ncurMap.addOverlay(marker);</pre><p>这样我们就成功给当前定位添加一个自定义覆盖物，效果如下图：</p><p><img src=\"/app/json/frames/react/img/bmap2.jpg\" style=\"max-width:100%;\"></p><p>如果要添加多个覆盖物，需要给出要添加覆盖物的点的坐标列表，并依次将其添加到地图上。可见，这种传统添加覆盖物的方式是比较复杂的。接下来，我们通过循环React-BMap的Marker组件给地图添加多个覆盖物，代码如下：</p><pre>&lt;Map center={{lng: 116.402544, lat: 39.928216}} zoom=\"12\" style={{height: '500px'}}&gt;\n    markers.map((item)=&gt;\n         &lt;Marker position={{lng: item.lng, lat: item.lat}}&gt;\n            &lt;div&gt;这里可以自定义覆盖物样式&lt;/div&gt;\n         &lt;/Marker&gt;)\n&lt;/Map&gt;</pre><p>由此可见，使用此方式添加多个覆盖物只需2步： 1.通过Map组件初始化地图，需设置地图容器大小，中心点坐标，地图层级； 2.根据点坐标循环Marker组件。\n<br>\n<br>注意，通过此方式自定义覆盖物，填充文字时，Marker组件默认将文字竖向排列。因此需要给覆盖物一个固定的宽度，使文字横向排列。</p><p><img src=\"/app/json/frames/react/img/bmap3.jpg\" style=\"max-width:100%;\"></p><p><h3>百度地图复杂场景的应用\n</h3>地图复杂场景的应用必然离不开事件处理函数。当我们对地图进行点击，缩放，拖拽等操作时，百度地图均提供了对应的事件处理函数。比如，地图加载完成时触发tilesloaded，点击地图时触发click，停止拖拽地图时触发dragend，停止缩放地图时触发zoomend等等。当然，React-BMap的Map组件也给我们提供了一套丰富的事件处理函数，更多请参考链接： https://github.com/huiyan-fe/react-bmap/blob/master/src/components/map.md ，这些方法需要在Map组件的getEvents回调中执行。\n<br>\n<br>现在，我们实现需求A：地图首先展示当前定位下的三级城市列表，然后点击城市的覆盖物图标，地图展示这个城市内符合用户需求的小区列表。\n<br>\n<br>首先，通过后端接口获取到三级城市列表，并通过React-BMap添加自定义覆盖物的方式将点添加到地图上，可将地图层级设为8-10级。接下来，我们要关注的是在️设定的地图区域内️获取符合用户需求的小区列表并添加到地图上。经过调研得知，当地图加载完成后，使用getBounds接口可获取地图区域范围，通过getSouthWest和getNorthEast可分别获取到左上角和右下角坐标。根据这两个坐标，可得到左下角和右上角坐标，然后将这两个坐标传给后台接口即可获取所设定的地图区域内的小区列表，最后在地图上给这些小区列表添加自定义覆盖物，地图层级设为13-16级。代码如下:</p><pre>getEvents() {\n    return {\n      // 给地图添加点击事件\n      click: (e) =&gt; {\n        // 当前地图显示小区，点击地图其他区域时，拍品列表隐藏，地图区域改变\n        if(store.mapViewHeight === 336){\n          store.mapViewHeight = ( document.documentElement.clientHeight || document.body.clientHeight )-51.5;\n          store.isAuctionListShow = false;\n        }\n      },\n\n      // 地图所有模块加载完成时触发\n      tilesloaded:(e)=&gt;{\n        let BMap = window.BMap;\n        let curMap = e.currentTarget; // 获取当前地图示例\n        let bounds = curMap.getBounds(); // 获取地图可视区域\n        let sw = bounds.getSouthWest(); // 获取左下角经纬度\n        let ne = bounds.getNorthEast(); // 获取右上角点经纬度\n        let leftTop = new BMap.Point(sw.lng, ne.lat); // 左上角经纬度\n        let rightBottom = new BMap.Point(ne.lng, sw.lat); // 右下角经纬度\n        store.phoneTopLeftCoordinate = {\n          lat: leftTop.lat.toFixed(6),\n          lon: leftTop.lng.toFixed(6),\n        };\n        store.phoneBottomRightCoordinate = {\n          lat: rightBottom.lat.toFixed(6),\n          lon: rightBottom.lng.toFixed(6),\n        };\n      },\n\n      // 停止拖拽地图时触发\n      dragend:(e)=&gt;{\n        let curMap = e.currentTarget;\n        store.mapCenter = curMap.getCenter();\n      },\n\n      // 地图更改缩放级别结束时触发\n      zoomend:(e)=&gt;{\n        let curMap = e.currentTarget;\n        store.mapCenter = curMap.getCenter();\n        store.mapZoom = curMap.getZoom();\n      }\n    }\n  }</pre><p>至此，我们就实现了需求A，效果如下图：</p><p><img src=\"/app/json/frames/react/img/bmap4.gif\" style=\"max-width:100%;\"></p><p>现在，我们来实现需求B：在需求A的基础上，点击小区覆盖物，页面被分成2部分，上方显示地图，小区的坐标点作为地图中心点，下方用于显示所选小区的其他信息内容。效果如下图：</p><p><img src=\"/app/json/frames/react/img/bmap5.gif\" style=\"max-width:100%;\"></p><p>点击小区覆盖物，改变地图区域大小，将所选城市的坐标点作为地图中心点，地图渲染完成后，能按照预期实现上图效果么？通过实践得知并不能。效果如下图：</p><p><img src=\"/app/json/frames/react/img/bmap6.gif\" style=\"max-width:100%;\"></p><p>不难看出，地图高度改变后并没有随着新的中心点移动，也就是说地图并没有随着高度变化重新渲染。查看Map组件源码map.js文件，找到props属性key，将高度作为props传给key，执行代码后，问题便迎刃而解。代码如下：</p><pre>&lt;Map key={height} center={{lng: 116.402544, lat: 39.928216}} zoom=\"12\" style={{height: '500px'}}&gt;\n    markers.map((item)=&gt;\n         &lt;Marker position={{lng: item.lng, lat: item.lat}}&gt;\n            &lt;div&gt;这里可以自定义覆盖物样式&lt;/div&gt;\n         &lt;/Marker&gt;)\n&lt;/Map&gt;</pre><p>执行上述代码后，会在控制台会给出一个警告</p><p><img src=\"/app/json/frames/react/img/bmap7.jpg\" style=\"max-width:100%;\"></p><p>从警告中我们得知，key是一个关键属性，属于React的预留属性，一般用在数组或者迭代器中，所以这样使用会产生命名冲突。虽然警告并不会影响代码的执行和功能的正常使用，但是没有代码洁癖的程序员是不会成为一个优秀的工程师滴，那就给React-BMap组件开发者提issues吧。目前组件开发者已经修复map.js中允许传key的bug，更新React-BMap包后，包版本已经升级到1.0.100，找到map.js查看，确实已经修复。修复结果如下图：</p><p><img src=\"/app/json/frames/react/img/bmap8.jpg\" style=\"max-width:100%;\"></p><p><h3>更好的用户体验\n</h3>针对需求A，多点击几个城市就会发现：明明有些城市内是有小区列表的，但是选择这个城市后，在地图上却看不到小区列表，此时，需要用户手动拖动或缩放地图才能找到。这无疑是给用户增加了操作步骤，有些用户会认为页面出了bug，体验效果并不是很好。\n<br>\n<br>如果用户选择有数据的城市后，无需进行拖动或者缩放等操作就能够在地图上看到小区列表，那么就会消除用户心里的落差感。最终采取的方案是将带有最优属性的那个小区的坐标点作为中心点渲染地图，当用户每次点击城市覆盖物时，就可以保证在地图上始终能看到小区列表。\n<br>\n<br>针对需求B，拖动地图后，将选择的小区拖到可视区域的边缘处，再次点击此小区覆盖物，此时地图并不能以这个坐标为中心点重新渲染，效果如下图：</p><p><img src=\"/app/json/frames/react/img/bmap9.gif\" style=\"max-width:100%;\"></p><p>对百度地图JavaScript API进行调研，发现panTo接口的作用就是将地图的中心点更改为给定的点，如果该点在当前的地图视图中已经可见，则会以平滑动画的方式移动到中心点位置。可以通过配置noAnimation为false强制移动过程不使用动画效果。优化后的交互效果如下图：</p><p><img src=\"/app/json/frames/react/img/bmap10.gif\" style=\"max-width:100%;\"></p><p><h3>总结\n</h3>本文首先介绍了如何引入地图并将地图成功的渲染到页面中，然后结合React-BMap使用，对百度地图JavaScript API以及在使用React-BMap过程中遇到的问题进行了研究和学习，最后在探讨地图复杂场景应用的同时就如何提升用户体验进行了思考并给出了自己的想法。</p><p><br></p>"}}