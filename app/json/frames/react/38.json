{"sta":1,"data":{"subTitle":"list渲染使用唯一key","content":"<p>我们都知道 React 在执行 Diff 算法时，会用到元素的 key 属性，它可以帮助 React 定位更改、添加或删除的项目，在重新 render 的时候尽可能少得更新 DOM 内容，加快更新速度。<br></p><p>\n<br>当然 key 值的设置也是有一定要求的，那就是要保证稳定性。对于一个列表组件来说，每一个列表项的 key 应该是唯一且固定的，比如每个列表项数据固定的 id。</p><pre>import React from \"react\";\n\nexport default class MyComponent extends React.Component {\n    render() {\n        return (\n            &lt;div className=\"param-title\"&gt;\n                &lt;b&gt;通知参数&lt;/b&gt;\n                {smsListParam.map((param: any, index: number) =&gt; {\n                    return(\n                        &lt;div className=\"param-title-content\" key={param.unionMark}&gt;\n                            &lt;div className=\"title-param\"&gt;{param.paramName}&lt;/div&gt;\n                            &lt;Select\n                                style={{width: 220}}\n                                placeholder={param.type === 0 ? param.defaultValue[0].name : '请选择'}\n                                defaultActiveFirstOption={false}\n                                filterOption={false}\n                                onChange={item =&gt; handlePackChange(item, param.paramKey)}\n                                disabled={param.type === 0}\n                                showArrow={param.type === 1}\n                                allowClear={true}\n                            &gt;\n                            &lt;/Select&gt;\n                        &lt;/div&gt;\n                    )\n                })}\n            &lt;/div&gt;\n        )\n    }\n}</pre><p>项目预览：</p><p><img src=\"/app/json/frames/react/img/r18.gif\" style=\"max-width:100%;\"></p><p>除了像 id 这样列表数据已有的单一字段，也可以使用多个字段，通过一些简单的组合或者算法，生成一个唯一且固定的值作为 key 的值。比如我们可以通过列表数据的 type 字段以及 name 字段唯一确定一个列表项。</p><pre>const List = data.map(item =&gt; {\n    return &lt;li key={`${item.type}_${item.name}`}&gt;{item.name}&lt;/li&gt;;\n})</pre><p>如果我们找不到 id 或者多个字段确定唯一列表项的话，一些情况下我们也可以使用列表数据的索引来作为 key 值，比如：列表项不会被重新排序或过滤；列表顶部或中间不会插入或删除列表项等（否则 React 可能会因为索引导致更新效率极大降低甚至数据更新错误）。\n<br>\n<br><blockquote>注意：由于在某些场景下使index做key是个大坑，还是不推荐大家去使用它。</blockquote></p><pre>const List = data.map((item, index) =&gt; {\n    return &lt;li key={index}&gt;{item.name}&lt;/li&gt;;\n})</pre><p><br></p><p><br></p>"}}