{"sta":1,"data":{"subTitle":"VueCLI项目结构详解","content":"<p>vue-cli脚手架工具就是为我们搭建了开发所需要的环境，为我们省去了很多精力。有必要对这个环境进行熟悉，我们就从项目的结构讲起。<br></p><p>Ps：由于版本实时更新和你选择安装的不同（这里列出的是模板为webpack的目录结构），所以你看到的有可能和下边的有所差别。</p><h3>目录结构</h3><pre><code>.\n|-- build                            // 项目构建(webpack)相关代码\n|   |-- build.js                     // 生产环境构建代码\n|   |-- check-version.js             // 检查node、npm等版本\n|   |-- dev-client.js                // 热重载相关\n|   |-- dev-server.js                // 构建本地服务器\n|   |-- utils.js                     // 构建工具相关\n|   |-- webpack.base.conf.js         // webpack基础配置\n|   |-- webpack.dev.conf.js          // webpack开发环境配置\n|   |-- webpack.prod.conf.js         // webpack生产环境配置\n|-- config                           // 项目开发环境配置\n|   |-- dev.env.js                   // 开发环境变量\n|   |-- index.js                     // 项目一些配置变量\n|   |-- prod.env.js                  // 生产环境变量\n|   |-- test.env.js                  // 测试环境变量\n|-- src                              // 源码目录\n|   |-- components                     // vue公共组件\n|   |-- store                          // vuex的状态管理\n|   |-- App.vue                        // 页面入口文件\n|   |-- main.js                        // 程序入口文件，加载各种公共组件\n|-- static                           // 静态文件，比如一些图片，json数据等\n|   |-- data                           // 群聊分析得到的数据用于数据可视化\n|-- .babelrc                         // ES6语法编译配置\n|-- .editorconfig                    // 定义代码格式\n|-- .gitignore                       // git上传需要忽略的文件格式\n|-- README.md                        // 项目说明\n|-- favicon.ico \n|-- index.html                       // 入口页面\n|-- package.json                     // 项目基本信息\n.</code></pre><p>重要文件讲解：\n<br>\n<br>package.json package.json文件是项目根目录下的一个文件，定义该项目开发所需要的各种模块以及一些项目配置信息（如项目名称、版本、描述、作者等）。\n<br>\n<br>package.json 里的scripts字段，这个字段定义了你可以用npm运行的命令。在开发环境下，在命令行工具中运行npm run dev 就相当于执行 node build/dev-server.js .也就是开启了一个node写的开发行建议服务器。由此可以看出script字段是用来指定npm相关命令的缩写。</p><pre><code>\"scripts\": {\n    \"dev\": \"node build/dev-server.js\",\n    \"build\": \"node build/build.js\"\n  },</code></pre><p>dependencies字段和devDependencies字段<br><blockquote>dependencies字段指项目运行时所依赖的模块；<br>\ndevDependencies字段指定了项目开发时所依赖的模块；\n</blockquote>在命令行中运行npm install命令，会自动安装dependencies和devDempendencies字段中的模块。package.json还有很多相关配置，如果你想全面了解，可以专门去百度学习一下。\n<br>\n<br>webpack配置相关\n<br>我们在上面说了运行npm run dev 就相当于执行了node build/dev-server.js,说明这个文件相当重要，先来熟悉一下它。 我贴出代码并给出重要的解释。\n<br>\n<br><h3>dev-server.js</h3></p><pre><code>// 检查 Node 和 npm 版本\nrequire('./check-versions')()\n\n// 获取 config/index.js 的默认配置\nvar config = require('../config')\n\n// 如果 Node 的环境无法判断当前是 dev / product 环境\n// 使用 config.dev.env.NODE_ENV 作为当前的环境\n\nif (!process.env.NODE_ENV) process.env.NODE_ENV = JSON.parse(config.dev.env.NODE_ENV)\n\n// 使用 NodeJS 自带的文件路径工具\nvar path = require('path')\n\n// 使用 express\nvar express = require('express')\n\n// 使用 webpack\nvar webpack = require('webpack')\n\n// 一个可以强制打开浏览器并跳转到指定 url 的插件\nvar opn = require('opn')\n\n// 使用 proxyTable\nvar proxyMiddleware = require('http-proxy-middleware')\n\n// 使用 dev 环境的 webpack 配置\nvar webpackConfig = require('./webpack.dev.conf')\n\n// default port where dev server listens for incoming traffic\n\n// 如果没有指定运行端口，使用 config.dev.port 作为运行端口\nvar port = process.env.PORT || config.dev.port\n\n// Define HTTP proxies to your custom API backend\n// https://github.com/chimurai/http-proxy-middleware\n\n// 使用 config.dev.proxyTable 的配置作为 proxyTable 的代理配置\nvar proxyTable = config.dev.proxyTable\n\n// 使用 express 启动一个服务\nvar app = express()\n\n// 启动 webpack 进行编译\nvar compiler = webpack(webpackConfig)\n\n// 启动 webpack-dev-middleware，将 编译后的文件暂存到内存中\nvar devMiddleware = require('webpack-dev-middleware')(compiler, {\n  publicPath: webpackConfig.output.publicPath,\n  stats: {\n    colors: true,\n    chunks: false\n  }\n})\n\n// 启动 webpack-hot-middleware，也就是我们常说的 Hot-reload\nvar hotMiddleware = require('webpack-hot-middleware')(compiler)\n// force page reload when html-webpack-plugin template changes\ncompiler.plugin('compilation', function (compilation) {\n  compilation.plugin('html-webpack-plugin-after-emit', function (data, cb) {\n    hotMiddleware.publish({ action: 'reload' })\n    cb()\n  })\n})\n\n// proxy api requests\n// 将 proxyTable 中的请求配置挂在到启动的 express 服务上\nObject.keys(proxyTable).forEach(function (context) {\n  var options = proxyTable[context]\n  if (typeof options === 'string') {\n    options = { target: options }\n  }\n  app.use(proxyMiddleware(context, options))\n})\n\n// handle fallback for HTML5 history API\n// 使用 connect-history-api-fallback 匹配资源，如果不匹配就可以重定向到指定地址\napp.use(require('connect-history-api-fallback')())\n\n// serve webpack bundle output\n// 将暂存到内存中的 webpack 编译后的文件挂在到 express 服务上\napp.use(devMiddleware)\n\n// enable hot-reload and state-preserving\n// compilation error display\n// 将 Hot-reload 挂在到 express 服务上\napp.use(hotMiddleware)\n\n// serve pure static assets\n// 拼接 static 文件夹的静态资源路径\nvar staticPath = path.posix.join(config.dev.assetsPublicPath, config.dev.assetsSubDirectory)\n// 为静态资源提供响应服务\napp.use(staticPath, express.static('./static'))\n\n// 让我们这个 express 服务监听 port 的请求，并且将此服务作为 dev-server.js 的接口暴露\nmodule.exports = app.listen(port, function (err) {\n  if (err) {\n    console.log(err)\n    return\n  }\n  var uri = 'http://localhost:' + port\n  console.log('Listening at ' + uri + '\\n')\n\n  // when env is testing, don't need open it\n  // 如果不是测试环境，自动打开浏览器并跳到我们的开发地址\n  if (process.env.NODE_ENV !== 'testing') {\n    opn(uri)\n  }\n})</code></pre><p>webpack.base.confg.js webpack的基础配置文件</p><pre><code>...\n...\nmodule.export = {\n    // 编译入口文件\n    entry: {},\n    // 编译输出路径\n    output: {},\n    // 一些解决方案配置\n    resolve: {},\n    resolveLoader: {},\n    module: {\n        // 各种不同类型文件加载器配置\n        loaders: {\n        ...\n        ...\n        // js文件用babel转码\n        {\n            test: /\\.js$/,\n            loader: 'babel',\n            include: projectRoot,\n            // 哪些文件不需要转码\n            exclude: /node_modules/\n        },\n        ...\n        ...\n        }\n    },\n    // vue文件一些相关配置\n    vue: {}\n}</code></pre><p><h3>.babelrc\n</h3>Babel解释器的配置文件，存放在根目录下。Babel是一个转码器，项目里需要用它将ES6代码转为ES5代码。如果你想了解更多，可以查看babel的知识。</p><pre><code>{\n  //设定转码规则\n  \"presets\": [\n    [\"env\", { \"modules\": false }],\n    \"stage-2\"\n  ],\n  //转码用的插件\n  \"plugins\": [\"transform-runtime\"],\n  \"comments\": false,\n  //对BABEL_ENV或者NODE_ENV指定的不同的环境变量，进行不同的编译操作\n  \"env\": {\n    \"test\": {\n      \"presets\": [\"env\", \"stage-2\"],\n      \"plugins\": [ \"istanbul\" ]\n    }\n  }\n}</code></pre><p><h3>.editorconfig\n</h3>该文件定义项目的编码规范，编译器的行为会与.editorconfig文件中定义的一致，并且其优先级比编译器自身的设置要高，这在多人合作开发项目时十分有用而且必要。</p><pre><code>root = true\n\n[*]    // 对所有文件应用下面的规则\ncharset = utf-8                    // 编码规则用utf-8\nindent_style = space               // 缩进用空格\nindent_size = 2                    // 缩进数量为2个空格\nend_of_line = lf                   // 换行符格式\ninsert_final_newline = true        // 是否在文件的最后插入一个空行\ntrim_trailing_whitespace = true    // 是否删除行尾的空格</code></pre><p><br></p><p><br></p>"}}