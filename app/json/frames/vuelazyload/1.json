{"sta":1,"data":{"subTitle":"使用 vue-lazyload 进行图片懒加载","content":"<h3>一、需求</h3><p>对某个大列表的图片需要进行懒加载，直接使用了 vue 的第三方插件 vue-lazyload，（这好像是用的最多的插件，也的确很好用）\n<br>\n<br>vue-lazyload github地址：<br><a href=\"https://github.com/hilongjw/vue-lazyload\" target=\"_blank\">https://github.com/hilongjw/vue-lazyload</a><br>在线demo地址：<br><a href=\"https://hilongjw.github.io/vue-lazyload/\" target=\"_blank\">https://hilongjw.github.io/vue-lazyload/</a><br><h3>二、基本使用\n</h3>安装：\n<br><blockquote>yarn add vue-lazyload\n</blockquote>引入\n<br><blockquote>import VueLazyload from 'vue-lazyload'<br>\nVue.use\n</blockquote>vue 在 use 的时候，存在配置项目，主要配置如下：<br><blockquote>preLoad: 图片加载的高度范围比例，默认为1.3，数字越大，预加载图片越多，数字越小，预加载图片数量越少<br>\nerror: 加载错误的代替图片（使用 require 直接引入 src 中的图片）<br>\nloading: 加载时的 loading 图片（使用 require 直接引入 src 中的图片）<br>\nattempt: 尝试加载的次数 默认为3</blockquote></p><pre>const lazyloadOptions = {\n    preLoad: 1.3,\n    error: require(\"@/assets/images/error.png\"),\n    loading: require(\"@/assets/images/loading.gif\"),\n    attempt: 1\n};\nVue.use(VueLazyload,options);</pre><p><h3>在 template 中使用\n</h3>如果是写在 template 的模板代码，可以直接使用 v-lazy 指定图片地址，如：</p><pre>&lt;img v-lazy=\"item.imgurl\" :alt=\"item.creator.name\" width=\"50\" height=\"50\"&gt;</pre><p>如果是在普通的 html 代码中使用，则需要指定一个 v-lazy-container 的属性，并且指定选择器是什么：<br>(用的比较少)</p><pre>&lt;div v-lazy-container=\"{ selector: 'img' }\"&gt;\n  &lt;img data-src=\"//domain.com/img1.jpg\"&gt;\n  &lt;img data-src=\"//domain.com/img2.jpg\"&gt;\n  &lt;img data-src=\"//domain.com/img3.jpg\"&gt;  \n&lt;/div&gt;</pre><p><h3>三、其他的一些经常用的配置项\n</h3><blockquote>listenEvents ：希望 vue 监听的事件，默认值：['scroll', 'wheel', 'mousewheel', 'resize', 'animationend', 'transitionend', 'touchmove']<br>\nfilter：图片类型的过滤,可以做到动态的修改图片的 src<br>\nlazyComponent:是否使用懒加载组件\n</blockquote>使用内置的懒加载组件，能够做更多额外的工作，比如：</p><pre>&lt;lazy-component @show=\"handler\"&gt;\n  &lt;img class=\"mini-cover\" :src=\"img.src\" width=\"100%\" height=\"400\"&gt;\n&lt;/lazy-component&gt;\n&lt;script&gt;\n  {\n    ...\n    methods: {\n      handler (component) {\n        console.log('this component is showing')\n      }\n    }\n\n  }\n&lt;/script&gt;</pre><p><br></p><p><br></p>"}}