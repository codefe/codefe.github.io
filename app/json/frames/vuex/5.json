{"sta":1,"data":{"subTitle":"Vuex在组件中使用或者重命名状态","content":"<p>在 Vuex 状态管理中， mapState 和 mapMutations 辅助函数对于在组件里面重命名状态和状态变更函数有很大的帮助。</p><p><h3>一、最直接的使用方式\n</h3>一般来说，最直接的使用方法就是直接在组件中将状态注入到每一个组件中<br>这样子就能够直接使用 $store.state.count 进行使用<br></p><pre>const app = new Vue({\n  el: '#app',\n  // 把 store 对象提供给 “store” 选项，这可以把 store 的实例注入所有的子组件\n  store,\n})</pre><p>因此，如果需要 template 中不直接使用 {{$srore.state.count}} 的做法中可以这么使用：</p><pre>data(){\n    return {\n        // 进行组件注入后，就可以直接使用 this.$store 调用 vuex 的状态实例\n        newCount:this.$store.state.count \n    }\n}</pre><p><h3>二、使用 mapState 和 mapMutations 辅助函数\n</h3>使用 mapState 和 mapMutations 的前提是要引入:</p><pre>import store from '@/vuex/store';\nimport {mapState , mapMutations } from 'vuex'</pre><p>一般来说我们都是避免直接使用 $store.state.count 或者是 $store.mutations.add<br>因此在组件中，methods 把状态变更的函数进行重命名:</p><pre>// 这种方法是最简单的，但是缺点就是映射出来的 count() 方法 名称必须和 mutations 中的函数一样\n// computed:mapState(['count']),\n// 下面是集中不同的方式 一种是直接使用state，然后通过state的参数进行使用\n// 在这个过程中，是可以使用this.num 来操作\n    computed:mapState({\n      count(state){\n          return state.count + this.num\n      },\n      countPlusLocalState(state){\n          return state.count + this.num\n      },\n      count2:'count'\n    }),\n// 在使用mapmutations的时候，如果只是重命名，则直接下面的方式即可，即使需要传递参数\n// 比如我在 store 中的 mutations里面定义的add函数是   add(state,num){return state.count + num}\n// 我重命名之后  newAdd 在使用的时候 还是直接传参即可  &lt;button @click=\"newAdd(10)\"&gt;&lt;/button&gt;\n    methods:mapMutations({\n       newAdd:'add',\n       newReduce:'reduce'\n    }),</pre><p>如果需要对状态变更方法或者某个状态进行重命名，则使用 mapState 和 mapMutations 是最简单的方案。\n<br>\n<br><h3>三 完整示例\n</h3>vuex/store.js</p><pre>/**\n * Created by Postbird on 2017/6/16.\n */\nimport Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex);\n\nconst state={\n  count:0,\n}\nconst mutations={\n  add(state,n){\n      state.count+=n;\n  },\n  reduce:function (state) {\n      state.count--;\n  }\n}\n\nexport default new Vuex.Store({\n  state,\n  mutations\n})</pre><p>组件</p><pre>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h2&gt;{{message}}&lt;/h2&gt;\n    &lt;hr&gt;\n    &lt;h3&gt;【 {{count}} 】- 【 {{newCount}} 】 - 【 {{countPlusLocalState}} 】 - 【 {{count2}} 】&lt;/h3&gt;\n    &lt;p&gt;\n      &lt;button @click=\"newAdd(10)\"&gt;+&lt;/button&gt;\n      &lt;button @click=\"newReduce\"&gt;-&lt;/button&gt;\n    &lt;/p&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n&lt;script&gt;\n  import store from '@/vuex/store';\n  import {mapState , mapMutations } from 'vuex'\n  export default{\n      name:'Count',\n      store,\n      data(){\n          return {\n            message:'使用vuex计算Count',\n            newCount:this.$store.state.count,\n            num:1\n          }\n      },\n    // computed:mapState(['count']),\n    computed:mapState({\n      count(state){\n          return state.count + this.num\n      },\n      countPlusLocalState(state){\n          return state.count + this.num\n      },\n      count2:'count'\n    }),\n    methods:mapMutations({\n       newAdd:'add',\n       newReduce:'reduce'\n    }),\n  }\n\n&lt;/script&gt;</pre><p><h3>四、展开运算符\n</h3>ES6里面的展开运算符能够更好的辅助去操作.\n<br>\n<br>比如除了 mapGetters / mapMutations 之外还有组件内部的 computed 其他操作，就可以使用展开运算符。</p><pre>// computed:mapState(['count']),\n    computed:{\n      ...mapState({\n        count(state){\n          return state.count + this.num\n        },\n        countPlusLocalState(state){\n          return state.count + this.num\n        },\n        count2:'count',\n      }),\n      ...mapGetters({\n        count3:'count',\n      }),\n      newMessage:function(){\n          return this.message.toUpperCase();\n      }\n    },</pre><p><br></p>"}}