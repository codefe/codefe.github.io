{"sta":1,"data":{"subTitle":"vm.$on,vm.$off,vm.$once,vm.$emit实现原理","content":"<p><code>$on,$off,$once,$emit</code>，这四个实现方法是一个很标准的订阅发布模式</p><p></p><p>具体实现代码如下：</p><h3>vm.$on</h3><pre><code>Vue.prototype.$on = function (event, fn) {\n\n    const vm = this\n\n    if (Array.isArray(event)) {\n\n        for (let i = 0; i &lt; event.length; i++) {\n\n            vm.$on(event[i], fn)\n\n        }\n\n    } else {\n\n        (vm._events[event] || (vm._events[event] = [])).push[fn]\n\n    }\n\n    return vm\n\n}</code></pre><p>温馨提示：_events是实现初始化的时候定义的，this.events = Object.create(null),所以不要困惑_events哪里来的。</p><h3>vm.$off</h3><pre><code>Vue.prototype.$off = function (event, fn) {\n\n    const vm = this\n\n    if (!arguments.length) {\n\n        vm._events = Object.create(null)\n\n        return vm\n\n    }\n\n    if (Array.isArray(event)) {\n\n        for (let i = 0; i &lt; event.length; i++) {\n\n            vm.$off(event[i], fn)\n\n        }\n\n        return vm\n\n    }\n\n    const cbs = vm._events[event]\n\n    if (!cbs) return vm\n\n    if (arguments.length === 1) {\n\n        vm._events[event] = null\n\n        return vm\n\n    }\n\n    if (fn) {\n\n        let len = cbs.length\n\n        while (len--) {\n\n            let cb = cbs[len]\n\n            if (cb === fn || cb.fn === fn) {\n\n                cbs.splice(len, 1)\n\n                break\n\n            }\n\n        }\n\n    }\n\n    return vm\n\n}</code></pre><h3>vm.$once</h3><pre><code>Vue.prototype.$once = function (event,fn){\n\n    const vm = this\n\n    function on(){\n\n        vm.$off(event,on)\n\n        fn.apply(vm,arguments)\n\n    }\n\n    on.fn = fn\n    \n    vm.$on(event,on)\n\n    return vm\n\n}</code></pre><h3>vm.$emit</h3><pre><code>Vue.prototype.$emit = function (event, ...params) {\n\n    const vm = this\n\n    let cbs = vm._events[event]\n\n    if (cbs) {\n\n        for (let i = 0; i &lt; cbs.length; i++) {\n\n            cbs[i].apply(vm, params)\n\n        }\n\n    }\n    \n    return vm\n\n}</code></pre><p><br></p>"}}