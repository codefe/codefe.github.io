{"sta":1,"data":{"subTitle":"Vue中组件怎么通讯","content":"<p></p><div><div><li><p>父子通讯： 父 → 子 <code>props</code>， 子 →  父 <code>$on / $emit</code><br>\n通过 <code>eventsMixin</code> 方法中的 <code>$on</code> 方法维护一个事件的数组，然后将函数名传入 <code>$emit</code> 方法，循环遍历出函数并执行。</p></li>\n<li><p>获得父子组件实例的方式：<code>$parent / $children</code><br>\n在初始化的时候调用 <code>initLifecycle</code> 方法初始化 <code>$parent</code> 和 <code>$children</code> 放在实例上</p></li>\n<li><p>在父组件中提供数据供子组件/孙子组件注入进来： <code>Provide / Inject</code>。<br>\n通过 <code>initProvide</code> 和 <code>initInjections</code> 方法分别把 <code>provide</code> 和 <code>reject</code> 放在 <code>$options</code> 上。在调用 <code>reject</code> 的时候，调用 <code>resolveInject</code> 方法遍历，查看父级是否有此属性，有则就直接 <code>return</code> 并把它定义在自己的实例上。</p></li>\n<li><p><code>Ref</code> 获得实例的方式调用组件的属性或方法<br>\n<code>ref</code> 被用来给元素或子组件注册引用信息。引用信息将会注册在父组件的 $refs 对象上。<br>\n用在 <code>DOM</code> 上就是 <code>DOM</code> 实例，用在组件上就是组件实例。</p></li>\n<li><p><code>Event bus</code> 实现跨组件通讯<br>\n实质上还是基于 <code>$on</code> 和 <code>$emit</code>，因为每个实例都有 <code>$on</code> 和 <code>$emit</code> 并且事件的绑定和触发必须在同一个实例，所以一般会专门定义一个实例去用于通信，如 <code>Vue.prototype.$bnts = new Vue</code>。</p></li>\n<li><p><code>Vuex</code> 状态管理实现通讯</p></li>\n<li><p><code>$attrs</code> 和 <code>$Listeners</code> 实现数据 和 事件的传递，还有 <code>v-bind=\"$prop\"</code></p></li></div><br></div>"}}