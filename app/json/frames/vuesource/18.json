{"sta":1,"data":{"subTitle":"vue是怎么实现数据侦测的？","content":"<p></p><div><div><p>vue主要是通过<code>Object.defineProperty</code>进行数据的侦测；vue的数据侦测有两种：1.Object类型的数据侦测。2.Array类型的数据侦测。Object类型的数据侦测比较容易直接通过<code>Object.defineProperty</code>结合递归就能实现，但是Array的类型侦测就比较麻烦一些，需要通过劫持Array原型上的<code>push,pop,shift,unshift,splice,`sort,reverse</code>的方法来实现侦测，因为这几个方法都会改变自身的数据。导致Array类型侦测比较麻烦还是因为<code>Object.defineProperty</code>对数组的支持比较差。（到Vue.3,vue的数据侦测会通过proxy进行重写）</p>\n<p>具体代码实现如下：</p></div><pre><code>const arrProto = Array.prototype\n\nconst arrayMethods = Object.create(arrProto)\n\nconst m = ['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse']\n\nm.forEach(function (method) {\n\n    const original = arrProto[method]\n\n    Object.defineProperty(arrayMethods, method, {\n\n        value: function v(...args) {\n\n            return original.apply(this, args)\n\n        }\n\n    })\n\n})\n\nfunction defineReactive(data) {\n\n    if (data &amp;&amp; typeof data !== 'object') return\n\n    if (Array.isArray(data)) {\n\n        data.__proto__ = arrayMethods\n\n    } else {\n\n        Object.keys(data).forEach(function (val) {\n\n            observer(data, val, data[val])\n\n        })\n\n    }\n\n}\n\nfunction observer(data, key, value) {\n\n    defineReactive(data)\n\n    Object.defineProperty(data, key, {\n\n        get() {\n\n            return value\n\n        },\n\n        set(newVal) {\n\n            if (newVal === value) return\n\n            value = newVal\n        }\n\n    })\n\n}</code></pre><p><br></p></div>"}}