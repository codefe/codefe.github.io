{"sta":1,"data":{"subTitle":"Promise.allSettled","content":"<p>该Promise.allSettled()方法返回一个在所有给定的promise都已经fulfilled或rejected后的promise，并带有一个对象数组，每个对象表示对应的promise结果。</p><p>当您有多个彼此不依赖的异步任务成功完成时，或者您总是想知道每个promise的结果时，通常使用它。\n<br>\n<br>相比之下，Promise.all() 更适合彼此相互依赖或者在其中任何一个reject时立即结束。\n<br>\n</p><pre><code>const promise1 = Promise.resolve(3);\nconst promise2 = new Promise((resolve, reject) =&gt; setTimeout(reject, 100, 'foo'));\nconst promises = [promise1, promise2];\n\nPromise.allSettled(promises).\n  then((results) =&gt; results.forEach((result) =&gt; console.log(result.status)));\n\n// expected output:\n// \"fulfilled\"\n// \"rejected\"</code></pre><p><br></p><p><h3>语法\n</h3><blockquote>Promise.allSettled(iterable);\n</blockquote><h3>参数\n</h3>iterable\n<br>一个可迭代的对象，例如Array，其中每个成员都是Promise。\n<br><h3>返回值\n</h3>一旦所指定的 promises 集合中每一个 promise 已经完成，无论是成功的达成或被拒绝，未决议的 Promise将被异步完成。那时，所返回的 promise 的处理器将传入一个数组作为输入，该数组包含原始 promises 集中每个 promise 的结果。\n<br>\n<br>对于每个结果对象，都有一个 status 字符串。如果它的值为 fulfilled，则结果对象上存在一个 value 。如果值为 rejected，则存在一个 reason 。value（或 reason ）反映了每个 promise 决议（或拒绝）的值。</p>"}}