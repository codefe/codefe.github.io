{"sta":1,"data":{"subTitle":"Array.of","content":"<p>Array.of() 方法创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型。&nbsp;</p><p>&nbsp;Array.of() 和 Array 构造函数之间的区别在于处理整数参数：Array.of(7) 创建一个具有单个元素 7 的数组，而 Array(7) 创建一个长度为7的空数组（注意：这是指一个有7个空位(empty)的数组，而不是由7个undefined组成的数组）。</p><pre><code>Array.of(7);       // [7]\nArray.of(1, 2, 3); // [1, 2, 3]\n\nArray(7);          // [ , , , , , , ]\nArray(1, 2, 3);    // [1, 2, 3]</code></pre><p><h3>语法\n</h3><blockquote>Array.of(element0[, element1[, ...[, elementN]]])\n</blockquote><h3>参数\n</h3>elementN\n<br>任意个参数，将按顺序成为返回数组中的元素。\n<br><h3>返回值\n</h3>新的 Array 实例。</p><h3>示例</h3><pre><code>Array.of(1);         // [1]\nArray.of(1, 2, 3);   // [1, 2, 3]\nArray.of(undefined); // [undefined]</code></pre><h3>兼容旧环境</h3><p>如果原生不支持的话，在其他代码之前执行以下代码会创建 Array.of() 。</p><pre><code>if (!Array.of) {\n  Array.of = function() {\n    return Array.prototype.slice.call(arguments);\n  };\n}</code></pre><p><br></p><p><br></p><p><br></p><p><br></p>"}}