{"sta":1,"data":{"subTitle":"什么是多态","content":"<p>多态的实际含义是：同一操作作用于不同的对象上面，可以产生不同的解释和不同的执行结\n果。换句话说，给不同的对象发送同一个消息的时候，这些对象会根据这个消息分别给出不同的\n反馈。</p><p>从字面上来理解多态不太容易，下面我们来举例说明一下。</p><blockquote>主人家里养了两只动物，分别是一只鸭和一只鸡，当主人向它们发出“叫”的命令时，鸭会“嘎嘎嘎”地叫，而鸡会“咯咯咯”地叫。这两只动物都会以自己的方式来发出叫声。它们同样“都是动物，并且可以发出叫声”，但根据主人的指令，它们会各自发出不同的叫声。</blockquote><p>其实，其中就蕴含了多态的思想。下面我们通过代码进行具体的介绍。</p><p>我们把上面的故事用 JavaScript代码实现如下：</p><pre>var makeSound = function(animal) {\n    animal.sound();\n}\n\nvar Duck = function(){}\nDuck.prototype.sound = function() {\n    console.log('嘎嘎嘎')\n}\nvar Chiken = function() {};\nChiken.prototype.sound = function() {\n    console.log('咯咯咯')\n}\n\nmakeSound(new Chicken());\nmakeSound(new Duck());</pre><p><br></p><blockquote>多态的思想实际上是把“做什么”和“谁去做”分离开来，要实现这一点，归根结底先要消除类型之间的耦合关系。如果类型之间的耦合关系没有被消除，那么我们在 makeSound 方法中指定了发出叫声的对象是某个类型，它就不可能再被替换为另外一个类型。多态的最根本好处在于，你不必再向对象询问“你是什么类型”而后根据得到的答案调用对象的某个行为——你只管调用该行为就是了，其他的一切多态机制都会为你安排妥当。</blockquote><p>换句话说，多态最根本的作用就是通过把过程化的条件分支语句转化为对象的多态性，从而消除这些条件分支语句。</p><p><br></p>"}}