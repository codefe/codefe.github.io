{"sta":1,"data":{"subTitle":"延时执行","content":"<pre><code>// 比如 sleep(1000) 意味着等待1000毫秒，还可从 Promise、Generator、Async/Await 等角度实现。\n// Promise\nconst sleep = time =&gt; {\n  return new Promise(resolve =&gt; setTimeout(resolve, time));\n};\n\nsleep(1000).then(() =&gt; {\n  console.log(1);\n});\n\n\n// Generator\nfunction* sleepGenerator(time) {\n  yield new Promise(function(resolve, reject) {\n    setTimeout(resolve, time);\n  });\n}\n\nsleepGenerator(1000)\n  .next()\n  .value.then(() =&gt; {\n    console.log(1);\n  });\n\n//async\nfunction sleep(time) {\n  return new Promise(resolve =&gt; setTimeout(resolve, time));\n}\n\nasync function output() {\n  let out = await sleep(1000);\n  console.log(1);\n  return out;\n}\n\noutput();\n\nfunction sleep(callback, time) {\n  if (typeof callback === \"function\") {\n    setTimeout(callback, time);\n  }\n}\n\nfunction output() {\n  console.log(1);\n}\n\nsleep(output, 1000);</code></pre><p><br></p>"}}