{"sta":1,"data":{"subTitle":"前端网页截图：Canvas截图 vs SVG截图","content":"<p>如今很多网站都引入截图功能，可用于问题反馈、内容分享等实用需求，而前端截图也不知不觉成为了首选。今天为大家推荐两种前端截图方式，虽然有些局限，但是也能应付大部分项目需求。</p><p><blockquote>1. Canvas截图：html2canvas<br>\n2. SVG截图：rasterizehtml\n</blockquote>原理其实很简单，虽然实现方式不太一致，但是核心思想是相同的。\n<br>\n<br>以html2canvas为代表的Canvas截图，通过遍历DOM克隆一份副本，将此副本在Canvas上重新绘制，并根据DOM的样式应用在对应的绘制元素上，再通过Canvas生成图片。转换过程可理解成：DOM→Canvas→Image。\n<br>\n<br>以rasterizehtml为代表的SVG截图，通过遍历DOM克隆一份副本，利用SVG的foreignObject把DOM作为外部资源嵌套在SVG中，将此SVG在Canvas上重新绘制，并根据DOM的样式应用在对应的绘制元素上，再通过Canvas生成图片。转换过程可理解成：DOM→SVG的ForeignObject→Canvas→Image。\n<br>\n<br>两种前端截图方式最后都是通过把DOM绘制到Canvas，再通过Canvas输出图片。\n<br>\n<br>虽然两种前端截图方式都有这两个封装得比较完善的第三方库html2canvas和rasterizehtml，但是由于在转换过程中存在一些自身的局限性，所以也导致截图可能出现一些不完美的问题。\n<br>\n<br>Canvas截图的限制性：<br><blockquote>无法渲染跨域资源(支持同域)<br>\n无法渲染iFrame和Flash内容(支持SVG)</blockquote></p><p>&nbsp;\n<br>SVG截图的限制性：<br><blockquote>无法渲染跨域资源(支持同域)<br>\n无法渲染如lazyload等通过JS加载的资源<br>\n无法渲染内联background-image或JS操作background-image</blockquote></p><p>&nbsp;\n<br>不多废话，直接上两种前端截图方式的代码，小伙伴们可根据项目需求自行优化代码和增加功能哈。<br></p><p>测试代码如下：&nbsp;</p><pre><code>&lt;div id=\"screenshot\"&gt;Hello World&lt;/div&gt;\n&lt;button id=\"save-btn\"&gt;保存&lt;/button&gt;</code></pre><pre><code>// 渲染图片\nfunction Render(src, width, height, cb) {\n    const img = new Image();\n    img.src = src;\n    img.width = width;\n    img.height = height;\n    img.crossOrigin = \"\"; // 图像跨域时配置\n    cb &amp;&amp; cb(img);\n}\n// 下载图片\nfunction Download(url, name) {\n    const target = document.createElement(\"a\");\n    target.href = url;\n    target.download = name;\n    const event = document.createEvent(\"MouseEvents\");\n    event.initEvent(\"click\", true, true);\n    target.dispatchEvent(event);\n}</code></pre><p>Canvas截图核心代码如下所示：</p><pre><code>import Html2canvas from \"html2canvas\";\nconst btn = document.getElementById(\"save-btn\");\nbtn.addEventListener(\"click\", () =&gt; {\n    const screenshot = document.getElementById(\"screenshot\");\n    // allowTaint: true, // 不能与useCORS共用\n    const opts = {\n        logging: false,\n        scale: 2,\n        useCORS: true\n    };\n    Html2canvas(screenshot, opts).then(res =&gt; {\n        const { height, width } = res;\n        const base64 = res.toDataURL(\"image/png\", 1);\n        Render(base64, width, height, img =&gt; {\n            document.body.appendChild(img);\n            Download(base64, \"screenshot.png\");\n        });\n    }, err =&gt; alert(\"截图失败，请重新尝试\"));\n});</code></pre><p>SVG截图核心代码如下所示：</p><pre><code>import Rasterizehtml from \"rasterizehtml\";\nconst btn = document.getElementById(\"save-btn\");\nbtn.addEventListener(\"click\", () =&gt; {\n    // drawURL()加载的URL必须是同域名URL或支持跨域的URL\n    // 下面的URL是随便写的，记得换成同域名URL或支持跨域的URL\n    const url = \"https://www.baidu.com\";\n    const canvas = document.createElement(\"canvas\");\n    const opts = {\n        executeJs: true,\n        height: screen.height,\n        width: screen.width\n    };\n    Rasterizehtml.drawURL(url, canvas, opts).then(res =&gt; {\n        const base64 = \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(res.svg)));\n        Render(base64, opts.width, opts.height, img =&gt; {\n            document.body.appendChild(img);\n            Download(base64, \"screenshot.png\");\n        });\n    }, err =&gt; alert(\"截图失败，请重新尝试\"));\n});</code></pre><p>\n<br>另外还有几点需要注意一下：<br><blockquote>使用Canvas截图兼容低版本浏览器时，不能使用CSS3属性和带有前缀的属性<br>\n使用SVG截图可获取同域&lt; iframe&gt;内容进行渲染<br>\n使用SVG截图可获取同域</blockquote></p><p><br></p>"}}