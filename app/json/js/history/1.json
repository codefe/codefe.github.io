{"sta":1,"data":{"subTitle":"History API","content":"<p>HTML5历史记录API使您可以通过JavaScript访问浏览器导航历史记录。HTML5历史记录API在单页Web应用程序中非常有用。单页Web应用程序可以使用HTML5历史记录API来使应用程序中的某个状态\"可标记\"。<br></p><p><h3>历史堆栈\n</h3>浏览历史由一堆URL组成。每次用户在同一个网站中浏览时，新页面的URL都会放在堆栈的顶部。当用户单击\"后退\"按钮时，堆栈中的指针将移动到堆栈中的上一个元素。如果用户再次单击\"前进\"按钮，则指针将向前移到堆栈上的最顶层元素。如果用户单击\"后退\"，然后单击新链接，则堆栈中最顶层的元素将被新的URL覆盖。\n<br>\n<br>这是历史记录堆栈的示例：<br><blockquote>http://myapp.com/great-new-story.html<br>\nhttp://myapp.com/news.html<br>\nhttp://myapp.com\n</blockquote>在上述历史记录堆栈中访问的最后一页是http://myapp.com/great-new-story.html。如果用户单击\"后退\"按钮，则历史记录堆栈中的指针将移回 http://myapp.com/news.html。如果用户单击\"前进\"按钮，则历史记录堆栈指针将向前移动http://myapp.com/great-new-story.html，但是如果用户单击另一个链接(在http://myapp.com/news.html页面上)，则该链接的URL将http://myapp.com/news.html在历史记录堆栈中覆盖 。\n<br>\n<br>HTML5历史记录API使Web应用程序可以访问该历史记录堆栈。</p><p><h3>HTML5历史记录API安全限制\n</h3>HTML5历史记录API仅允许网页访问部分浏览历史记录，该部分与网页本身位于同一域中。出于安全原因，历史记录API中的此限制是必需的，因此网页无法查看用户访问过哪些其他网站。\n<br>\n<br>同样，HTML5历史记录API不允许网页将URL推入历史记录堆栈中，该URL与网页的域不在同一域中。该限制确保了当用户开始输入网页时，网页不能假装已将用户转发到例如Paypal并嗅探其用户名/密码等。</p><p><h3>历史对象\n</h3>您可以通过history对象访问浏览历史记录，该对象在JavaScript中可以作为全局对象使用(实际上是window.history)。\n<br>\n<br>该history对象包含以下功能-包括历史记录API：\n<br>\n<br><blockquote>back()\n<br>forward()\n<br>go(index)\n<br>pushState(stateObject, title, url)\n<br>replaceState(stateObject, title, url)\n</blockquote>\n\n\n\n\n<br>该back()功能将浏览历史记录移回到上一个URL。调用back() 具有与用户单击浏览器的\"后退\"按钮相同的效果。\n<br>\n<br>该forward()功能将浏览历史记录向前移动到历史记录的下一页。调用forward()与单击浏览器的\"转发\"按钮具有相同的效果。仅back()在调用该函数或单击\"后退\"按钮时才可能。如果历史记录已经指向浏览历史记录中的最新URL，则没有任何前进的方向。\n<br>\n<br>该go(index)函数可以根据您作为参数传递给该go()函数的索引来向后或向前移动历史记录。如果您go()使用负索引进行调用(例如go(-1))，则浏览器将返回历史记录。如果您向go() 函数传递一个正索引，那么浏览器将在浏览历史记录中向前移动(例如go(1))。索引指示历史记录中要在浏览历史记录中前进或后退的步骤，例如1,2，-1，-2等。\n<br>\n<br>该pushState(stateObject, title, url)函数将新的URL推送到历史记录堆栈。该函数具有三个参数。该url是推到历史堆栈的URL。该title 参数通常被浏览器忽略。的stateObject是，当一个新的URL被压入历史堆栈，将随着事件传递的对象解雇。它stateObject可以包含您想要的任何数据。它只是一个JavaScript对象。\n<br>\n<br>该replaceState(stateObject, title, url)函数的功能类似于该pushState()函数，只是它将历史记录堆栈中的当前元素替换为新的URL。当前元素不一定是最重要的元素。这是目前所指向的元件，其可以是在堆栈中的任何元件，如果 back()，forward()和go()功能已经被称为上history 对象。</p><p><h3>历史API示例\n</h3>现在该来看一些有关如何使用HTML5历史记录API的示例。\n<br>\n<br>back()和forward()\n<br>首先让我们看看如何使用back()和 forward()函数在历史记录中来回移动：<br><blockquote>history.back();<br>\nhistory.forward();\n</blockquote>请记住，history对象位于window对象中，因此您还可以编写：<br><blockquote>window.history.back();<br>\nwindow.history.forward();\n</blockquote>但是，由于该window对象是默认对象，因此可以将其省略。window在本教程的其余部分中，我将忽略该 对象。\n<br>\n<br>请记住，除非您(或用户)首先移回历史记录，否则您无法移入历史记录。<br><blockquote>go()\n</blockquote>现在让我们看看如何使用该go()函数执行类似于back()和 forward()函数的动作。首先，这是您用来go()向后浏览历史记录的上一步：<br><blockquote>history.go(-1);\n</blockquote>要向后移动两步，您可以将-2参数作为参数传递给go()函数，如下所示：<br><blockquote>history.go(-2);\n</blockquote>同样，要使历史向前发展，您可以向go()函数传递正索引。这是两个在历史上向前推进了一步和两个步骤的示例：<br><blockquote>history.go(1);<br>\nhistory.go(2);\n</blockquote>当然，如果您同时执行了这两行，则浏览历史记录将总共向前移动3个步骤。<br><blockquote>pushState()\n</blockquote>要将状态推入历史记录堆栈，请调用 对象的pushState()函数history。这是一个pushState()示例：<br><blockquote>var state = {};<br>\nvar title = \"\";<br>\nvar url   = \"next-page.html\";<br>\nhistory.pushState(state, title, url);\n</blockquote>本示例将新URL推送到历史记录堆栈中。这还将更改浏览器的地址字段中的URL，但不会导致浏览器尝试加载该URL。<br><blockquote>replaceState()\n</blockquote>该replaceState()函数替换了当前指向的历史记录堆栈中的history元素。如果用户已使用\"后退\"按钮将其移回历史记录，则这可能不是最重要的元素。这是一个replaceState()示例：\n<br>\n<br><blockquote>var state = {};<br>\nvar title = \"\";<br>\nvar url   = \"another-page.html\";\n<br>history.replaceState(state, title, url);\n</blockquote>\n替换状态也将更改浏览器的地址字段中的URL，但不会使浏览器加载该URL。替换URL的页面仍保留在浏览器中。\n<br>\n<br><h3>浏览历史记录更改\n</h3>HTML5历史记录API使网页能够侦听浏览器历史记录中的更改。安全限制也适用于此，因此不会向网页通知导致URL超出网页域之外的历史记录更改。\n<br>\n<br>要侦听浏览器历史记录中的更改，请onpopstate在window 对象上设置侦听器。这是浏览器历史记录事件侦听器示例：\n<br>\n<br><blockquote>window.onpopstate = function(event){<br>\n&nbsp; &nbsp; console.log(\"历史记录更改为：\" + document.location.href);<br>\n }\n</blockquote>该onpopstate事件处理函数将被调用每次在同一页内的浏览器历史记录更改(浏览器的历史，页面推送到历史堆栈)。对历史更改事件的反应可能是从URL提取参数并将相应的内容加载到页面中(例如，通过AJAX)。\n<br>\n<br>注意：只有改变而导致的任何\"返回\"或\"前进\"按钮，或相应的历史导航功能 back()，forward()并且go()将导致onpopstate事件侦听器被调用。调用pushState()和replaceState()函数将不会触发历史记录更改事件。\n<br>\n<br><h3>在实践中使用History API\n</h3>当将新的URL推入历史记录堆栈时，浏览器的地址字段中的URL将更改为新的URL。但是，浏览器不会尝试加载该URL。仅显示URL并将其推入堆栈，就像浏览器已访问该页面一样，但是推送新状态的页面仍保留在浏览器中。\n<br>\n<br>将新URL推送到历史记录堆栈是一种使单页应用程序(SPA)中的特定状态可添加书签的有用方法。例如，在单页在线商店中，应用程序的URL可能是：<br><blockquote>http://myshop.com\n</blockquote>该应用程序可能能够在同一页面中向用户显示产品，但是用户如何将指向特定产品的链接发送给朋友？\n<br>\n<br>解决方案是，当加载新产品时，单页面应用将新URL推送到历史记录堆栈中。这不会导致新URL的加载，但确实会使新URL在浏览器的地址字段中可见。从这里可以将其添加为书签或复制粘贴到电子邮件等中。以下是这种可添加书签的URL外观的示例：<br><blockquote>http://myshop.com?productId=234\n</blockquote>或者，也许是一个更具可读性的URL：<br><blockquote>http://myshop.com/products/234\n</blockquote>或者是一个略多于REST的版本(也提到了产品类型)：<br><blockquote>http://myshop.com/products/books/234\n</blockquote>在将该URL推送到浏览历史记录之后，Web商店页面将通过AJAX加载相应的产品并将其显示给用户。\n<br>\n<br>如果用户单击\"后退\"按钮，onpopstate则将调用事件处理程序。然后，网页应查看新的URL是什么，如果URL返回，则加载与该URL对应的产品或应用程序的首页http://myshop.com。\n<br>\n<br>这是一个HTML5代码示例，说明了使用AJAX将数据加载到浏览器中的原理：</p><pre>&lt;a href=\"javascript:push('http://myshop.com/books/123');\"&gt;\n    Book 123\n&lt;/a&gt; &lt;br/&gt;\n&lt;a href=\"javascript:push('http://myshop.com/apps/456');\"&gt;\n    App 456\n&lt;/a&gt;\n\n&lt;script&gt;\nfunction loadUrl(url) {\n    console.log(\"loading data from url: \" + url);\n}\n\nfunction push(url) {\n    history.pushState(null, null, url);\n    loadUrl(url);\n}\n\nwindow.onpopstate = function(event) {\n    console.log(\"history changed to: \" + document.location.href);\n    loadUrl(document.location.href);\n}\n&lt;/script&gt;</pre><p>本示例包含两个具有JavaScript Click侦听器的链接。单击链接之一后，相应的URL将被推入历史记录堆栈，然后加载到浏览器中。\n<br>\n<br>该示例还包含一个onpopstate事件侦听器。当用户单击\"后退\"或\"前进\"按钮时，此事件侦听器将加载浏览器地址字段现在显示的任何URL。\n<br>\n<br><h3>配置服务器\n</h3>如果用户单击链接和\"后退\" /\"前进\"按钮，则前面显示的示例将起作用。但是，如果用户将URL发送给朋友或将其添加为书签并稍后访问，该怎么办？\n<br>\n<br>如果用户尝试访问加标签的URL，http://myshop.com/books/123则浏览器将向Web服务器请求该URL。Web服务器需要知道它必须发送回与从URL发送回的相同的单页应用程序http://myshop.com。您将需要配置Web服务器来执行此操作。\n<br>\n<br>同样，单页Web应用程序必须查看首次加载时使用的URL，并使用该URL确定要加载和显示的内容。因此，如果单页应用程序已加载URL，则 myshop.com/books/123该应用程序应加载相应的产品并显示它。此URL检查必须在单页应用程序初始化期间进行。</p><p><br></p>"}}