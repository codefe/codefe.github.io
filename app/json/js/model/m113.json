{"sta":1,"data":{"subTitle":"实际场景-动态增加参数","content":"<p>一个常规的 ajax 请求参数包括 type / url / param，当突发一个特殊情况，需要在 ajax 的参数中，新增一个 token 参数。<br></p><p><h3>1 普通做法\n</h3>先上代码：\n<br>\n</p><pre>const ajax = function (type, url, param) {\n    // 新增token参数\n    param.token = 'xxx'\n    // ...ajax请求...省略\n}</pre><p><br></p><p>好了，又一次违反开放-封闭原则，直接修改了 ajax 函数内部.\n<br>\n<br><h3>2 装饰器做法\n</h3>通过装饰器模式，在 ajax 调用之前，为 ajax 增加 token 参数，代码如下：\n<br>\n</p><pre>const before = function (fn, beforeFn) {\n    return function () {\n        beforeFn.apply(this, arguments)\n        return fn.apply(this, arguments)\n    }\n}\n\nlet ajax = function (type, url, param) {\n    console.log(arguments)\n    // ...ajax请求...省略\n}\n\najax = before(ajax, function (type, url, param) {\n    console.log(param)\n    param.token = 'xxx'\n})\n\najax('type', 'url', {name: 'tj'})</pre><p><br></p><p>这样做可以减少 ajax 函数的职责，提高了 ajax 函数的可复用性&nbsp;<br></p>"}}