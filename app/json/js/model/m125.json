{"sta":1,"data":{"subTitle":"实际场景-双向数据绑定","content":"<p>双向数据绑定也可以通过观察者模式实现。<br></p><p>\n<br>双向指的是视图 view 和模型 model，当视图发生改变时，模型也发生变化，同样，当模型发生改变，视图也跟着同步变化。\n<br>\n<br>分为以下几个步骤实现：\n<br><h3>1 新建发布-订阅对象\n</h3>新建一个发布-订阅对象，用于发布消息，订阅消息。\n<br>\n<br>subscrib：订阅函数，当其他对象添加订阅消息时，将回调函数 push 进 callbacks 对象数组中；\n<br>publish：发布函数，当发布消息时，触发 callbacks 中该消息对应的 callback.\n<br>\n</p><pre>const Pubsub = {\n    subscrib: function (ev, callback) {\n        this._callbacks || (this._callbacks = {});\n        (this._callbacks[ev] || (this._callbacks[ev] = [])).push(callback);\n    },\n\n    publish: function () {\n        const args = [...arguments]\n        const ev = args.shift()\n\n        if (!this._callbacks) return\n        if (!this._callbacks[ev]) return\n\n        this._callbacks[ev].forEach(callback =&gt; {\n            callback(...args)\n        })\n    }\n}</pre><p><br></p><p><h3>2 ui 更新\n</h3>2.1 发布 ui 更新消息\n<br>注册 document 的 keyup / change 事件，当激活事件的 dom 元素拥有 data-bind属性时，说明 ui 正在更新，发布 ui 更新消息通知订阅者。\n<br>\n</p><pre>function eventHander (e) {\n    const { target } = e\n    const { value: propValue } = target\n\n    const propNameWhole = target.getAttribute('data-bind')\n    if (propNameWhole) {\n        // 发布ui更新消息\n        Pubsub.publish('ui-update-event', { propNameWhole, propValue })\n    }\n}\n\nconsole.log(document.addEventListener)\ndocument.addEventListener('change', eventHander, false)\ndocument.addEventListener('keyup', eventHander, false)</pre><p><br></p><p>2.2 订阅 model 更新消息\n<br>所有包含 data-bind 属性的 dom 元素，订阅 model 更新消息，当 model 更新时，ui 将会收到通知。\n<br>\n</p><pre>// 订阅model更新消息，更新后所有符合条件的dom节点都会收到通知，进行更新\nPubsub.subscrib('model-update-event', function ({propNameWhole, propValue}) {\n    const elements = document.querySelectorAll(`[data-bind=\"${propNameWhole}\"]`)\n\n    elements.forEach(element =&gt; {\n        const elementTagName = element.tagName.toLowerCase()\n        const formTypeTagNames = ['input', 'select', 'textarea']\n        if (formTypeTagNames.includes(elementTagName)) {\n            element.value = propValue\n        } else {\n            element.innerHTML = propValue\n        }\n    })\n})</pre><p><br></p><p><h3>3 model 更新\n</h3>3.1 订阅 ui 更新消息\n<br>订阅 ui 更新消息，当 ui 更新时，触发 modal 更新。\n<br>\n</p><pre>class Bind {\n    constructor () {\n        this.modelName = ''\n    }\n\n    initModel ({ modelName }) {\n        this.modelName = modelName\n\n        // 订阅ui更新消息\n        Pubsub.subscrib('ui-update-event', ({propNameWhole, propValue}) =&gt; {\n            const [ , _propName] = propNameWhole.split('.')\n            this.updateModalData(_propName, propValue)\n        })\n    }\n\n    // xxx省略xxx\n\n    updateModalData (propName, propValue) {\n        const propNameWhole = `${this.modelName}.${propName}`\n        // 发布model更新消息\n        Pubsub.publish('model-update-event', { propNameWhole, propValue });\n    }\n\n}</pre><p><br></p><p>3.2 发布model更新消息\n<br>model 更新时，发布 model 更新消息，此时，订阅了 model 更新消息的 ui，将得到通知。&nbsp;<br></p><pre>class Bind {\n    constructor () {\n        this.modelName = ''\n    }\n\n    // xxx省略xxx\n\n    loadModalData (modelData) {\n        for (let propName in modelData) {\n            this.updateModalData(propName, modelData[propName])\n        }\n    }\n\n    updateModalData (propName, propValue) {\n        const propNameWhole = `${this.modelName}.${propName}`\n        // 发布model更新消息\n        Pubsub.publish('model-update-event', { propNameWhole, propValue });\n    }\n\n}</pre><p><br></p><p>完整源码见：&nbsp;<a href=\"https://github.com/codefe/web-learn-note/blob/main/public/%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A.html\" target=\"_blank\">github</a></p>"}}