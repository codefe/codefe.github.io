{"sta":1,"data":{"subTitle":"实际场景-网站登录","content":"<p>网站登录功能，想必大多数做过平台需求的同学都实现过，当网站中的不同模块，如Header模块/Nav模块/正文模块，都依赖登录后获取的用户数据时，该怎么去实现呢？<br></p><p><h3>1 普通做法\n</h3>先看代码：</p><pre>login.succ((data =&gt; {\n    header.setAvatar(data.avatar) // 设置头像\n    nav.setAvatar(data.avatar) // 设置导航区的头像\n    list.refresh() // 刷新列表\n})</pre><p>这样的代码是不是特别熟悉？把依赖的方法，放在回调函数中。上述就是在登录成功的回调函数中，添加了各模块的方法。这么做导致各个模块和登录模块高度耦合，当新增了一个地址栏模块时，不得不再次修改登录模块的回调函数，违反了开放-封闭原则。<br></p><p>\n<br><h3>2 观察者模式\n</h3>用观察者模式，优化上述需求。\n<br>\n<br>登录模块是一个订阅对象，Header模块/Nav模块/正文模块添加对登录模块的订阅，当登录模块发生改变时，通知各个订阅了登录模块的模块。代码如下：&nbsp;<br></p><pre>// 登录模块js\n// 登录成功后，发布“loginSucc”登录成功消息，并传递data数据\nlogin.succ(data=&gt; {\n    login.trigger('loginSucc', data)\n})\n\n// header模块js\n// 订阅“loginSucc”登录成功消息\nlogin.listen('loginSucc', () =&gt; {\n    header.setAvatar(data.avatar)\n})\n\n// nav模块js\n// 订阅“loginSucc”登录成功消息\nlogin.listen('loginSucc', () =&gt; {\n    nav.setAvatar(data.avatar)\n})</pre><p>上述代码用观察者模式重构了网站登录功能，后续不管新增多少业务模块，依赖登录功能，都只需要在模块内新增对登录成功的订阅，无需再改动登录模块。</p><p><br></p>"}}