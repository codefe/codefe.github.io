{"sta":1,"data":{"subTitle":"模拟场景-ajax异步请求数据","content":"<p>在列表需要分页时，同一页的数据理论上只需要去后台拉取一次，可以把这些拉取过的数据缓存下来，下次请求时直接使用缓存数据</p><p><h3>缓存代理\n</h3>使用缓存代理实现上述功能，代码如下：</p><pre>(async function () {\n  function getArticle (currentPage, pageSize) {\n    console.log('getArticle', currentPage, pageSize)\n    // 模拟一个ajax请求\n    return new Promise((resolve, reject) =&gt; {\n      resolve({\n        ok: true,\n        data: {\n          list: [],\n          total: 10,\n          params: {\n            currentPage, \n            pageSize\n          }\n        }\n      })\n    })\n  }\n\n  const proxyGetArticle = (() =&gt; {\n    const caches = []\n\n    return async (currentPage, pageSize) =&gt; {\n\n      const cache = Array.prototype.join.call([currentPage, pageSize],',')\n\n      if (cache in caches) {\n        return caches[cache]\n      }\n      const { data, ok } = await getArticle(currentPage, pageSize)\n\n      if (ok) {\n        caches[cache] = data\n      }\n\n      return caches[cache]\n    }\n  })()\n\n  // 搜索第一页\n  await proxyGetArticle(1, 10)\n\n  // 搜索第二页\n  await proxyGetArticle(2, 10)\n\n  // 再次搜索第一页\n  await proxyGetArticle(1, 10)\n\n})()</pre><p>通过缓存代理，在第二次请求第一页的数据时，直接在缓存数据中拉取，无须再次从服务器请求数据。<br></p><p>\n<br></p>"}}