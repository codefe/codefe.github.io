{"sta":1,"data":{"subTitle":"模拟场景-小明送花给小白","content":"<h3>1 传统做法</h3><p>传统做法是小明直接把花送给小白，小白接收到花，代码如下：</p><pre>const Flower = function () {\n    return '玫瑰🌹'\n}\n\nconst xiaoming = {\n    sendFlower: target =&gt; {\n        const flower = new Flower()\n        target.receiveFlower(flower)\n    }\n}\n\nconst xiaobai = {\n    receiveFlower: flower =&gt; {\n        console.log('收到花', flower)\n    }\n}\n\nxiaoming.sendFlower(xiaobai)</pre><h3>2 代理模式</h3><p>但是，小明并不认识小白，他想要通过小代，帮他打探小白的情况，在小白心情好的时候送花，这样成功率更高。代码如下：</p><pre>const Flower = function () {\n    return '玫瑰🌹'\n}\n\nconst xiaoming = {\n    sendFlower: target =&gt; {\n        const flower = new Flower()\n        target.receiveFlower(flower)\n    }\n}\n\nconst xiaodai = {\n    receiveFlower: flower =&gt; {\n        xiaobai.listenGoodMood().then(() =&gt; {\n            xiaobai.receiveFlower(flower)\n        })\n    }\n}\n\nconst xiaobai = {\n    receiveFlower: flower =&gt; {\n        console.log('收到花', flower)\n    },\n    listenGoodMood: fn =&gt; {\n        return new Promise((reslove, reject) =&gt; {\n            // 10秒后，心情变好\n            reslove()\n        })\n    }\n}\n\nxiaoming.sendFlower(xiaodai)</pre><p>以上，小明通过小代，监听到小白心情的心情变化，选择在小白心情好时送花给小白。不仅如此，小代还可以做以下事情：\n<br>\n<br>帮助小白过滤掉一些送花的请求，这就叫做保护代理；\n<br>帮助小明，在小白心情好时，再执行买花操作，这就叫做虚拟代理。虚拟代理把一些开销很大的对象，延迟到真正需要它的时候才去创建。</p><p><br></p>"}}