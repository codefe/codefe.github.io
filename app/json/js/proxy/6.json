{"sta":1,"data":{"subTitle":"扩展构造函数","content":"<p>方法代理可以轻松地通过一个新构造函数来扩展一个已有的构造函数。这个例子使用了construct和apply。</p><pre><code>function extend(sup, base) {\n  var descriptor = Object.getOwnPropertyDescriptor(\n    base.prototype, \"constructor\"\n  );\n  base.prototype = Object.create(sup.prototype);\n  var handler = {\n    construct: function(target, args) {\n      var obj = Object.create(base.prototype);\n      this.apply(target, obj, args);\n      return obj;\n    },\n    apply: function(target, that, args) {\n      sup.apply(that, args);\n      base.apply(that, args);\n    }\n  };\n  var proxy = new Proxy(base, handler);\n  descriptor.value = proxy;\n  Object.defineProperty(base.prototype, \"constructor\", descriptor);\n  return proxy;\n}\n\nvar Person = function (name) {\n  this.name = name\n};\n\nvar Boy = extend(Person, function (name, age) {\n  this.age = age;\n});\n\nBoy.prototype.sex = \"M\";\n\nvar Peter = new Boy(\"Peter\", 13);\nconsole.log(Peter.sex);  // \"M\"\nconsole.log(Peter.name); // \"Peter\"\nconsole.log(Peter.age);  // 13</code></pre><p><br></p>"}}