{"sta":1,"data":{"subTitle":"通过属性查找数组中的特定对象","content":"<p>以下代理为数组扩展了一些实用工具。如你所见，通过 Proxy，我们可以灵活地“定义”属性，而不需要使用 Object.defineProperties 方法。以下例子可以用于通过单元格来查找表格中的一行。在这种情况下，target 是 table.rows。</p><pre><code>let products = new Proxy([\n  { name: 'Firefox'    , type: 'browser' },\n  { name: 'SeaMonkey'  , type: 'browser' },\n  { name: 'Thunderbird', type: 'mailer' }\n], {\n  get: function(obj, prop) {\n    // 默认行为是返回属性值， prop ?通常是一个整数\n    if (prop in obj) {\n      return obj[prop];\n    }\n\n    // 获取 products 的 number; 它是 products.length 的别名\n    if (prop === 'number') {\n      return obj.length;\n    }\n\n    let result, types = {};\n\n    for (let product of obj) {\n      if (product.name === prop) {\n        result = product;\n      }\n      if (types[product.type]) {\n        types[product.type].push(product);\n      } else {\n        types[product.type] = [product];\n      }\n    }\n\n    // 通过 name 获取 product\n    if (result) {\n      return result;\n    }\n\n    // 通过 type 获取 products\n    if (prop in types) {\n      return types[prop];\n    }\n\n    // 获取 product type\n    if (prop === 'types') {\n      return Object.keys(types);\n    }\n\n    return undefined;\n  }\n});\n\nconsole.log(products[0]); // { name: 'Firefox', type: 'browser' }\nconsole.log(products['Firefox']); // { name: 'Firefox', type: 'browser' }\nconsole.log(products['Chrome']); // undefined\nconsole.log(products.browser); // [{ name: 'Firefox', type: 'browser' }, { name: 'SeaMonkey', type: 'browser' }]\nconsole.log(products.types); // ['browser', 'mailer']\nconsole.log(products.number); // 3</code></pre><p><br></p>"}}