{"sta":1,"data":{"subTitle":"handler 对象的方法","content":"<p>handler 对象是一个容纳一批特定属性的占位符对象。它包含有 Proxy 的各个捕获器（trap）。\n\n所有的捕捉器是可选的。如果没有定义某个捕捉器，那么就会保留源对象的默认行为。</p><p>handler.getPrototypeOf()\n<br>Object.getPrototypeOf 方法的捕捉器。\n<br>handler.setPrototypeOf()\n<br>Object.setPrototypeOf 方法的捕捉器。\n<br>handler.isExtensible()\n<br>Object.isExtensible 方法的捕捉器。\n<br>handler.preventExtensions()\n<br>Object.preventExtensions 方法的捕捉器。\n<br>handler.getOwnPropertyDescriptor()\n<br>Object.getOwnPropertyDescriptor 方法的捕捉器。\n<br>handler.defineProperty()\n<br>Object.defineProperty 方法的捕捉器。\n<br>handler.has()\n<br>in 操作符的捕捉器。\n<br>handler.get()\n<br>属性读取操作的捕捉器。\n<br>handler.set()\n<br>属性设置操作的捕捉器。\n<br>handler.deleteProperty()\n<br>delete 操作符的捕捉器。\n<br>handler.ownKeys()\n<br>Object.getOwnPropertyNames 方法和 Object.getOwnPropertySymbols 方法的捕捉器。\n<br>handler.apply()\n<br>函数调用操作的捕捉器。\n<br>handler.construct()\n<br>new 操作符的捕捉器。\n<br>一些不标准的捕捉器已经被废弃并且移除了。\n<br>\n<br><h3>基础示例\n</h3>在以下简单的例子中，当对象中不存在属性名时，默认返回值为 37。下面的代码以此展示了 get handler 的使用场景。</p><pre><code>const handler = {\n    get: function(obj, prop) {\n        return prop in obj ? obj[prop] : 37;\n    }\n};\n\nconst p = new Proxy({}, handler);\np.a = 1;\np.b = undefined;\n\nconsole.log(p.a, p.b);      // 1, undefined\nconsole.log('c' in p, p.c); // false, 37</code></pre><p><br></p>"}}