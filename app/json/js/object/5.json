{"sta":1,"data":{"subTitle":"Object.entries","content":"<p>Object.entries()方法返回一个给定对象自身可枚举属性的键值对数组，其排列与使用 for...in 循环遍历该对象时返回的顺序一致（区别在于 for-in 循环还会枚举原型链中的属性）。</p><pre><code>const object1 = {\n  a: 'somestring',\n  b: 42\n};\n\nfor (const [key, value] of Object.entries(object1)) {\n  console.log(`${key}: ${value}`);\n}\n\n// expected output:\n// \"a: somestring\"\n// \"b: 42\"\n// order is not guaranteed</code></pre><p><h3>语法\n</h3><blockquote>Object.entries(obj)\n</blockquote><h3>参数\n</h3>obj\n<br>可以返回其可枚举属性的键值对的对象。\n<br><h3>返回值\n</h3>给定对象自身可枚举属性的键值对数组。\n<br><h3>描述\n</h3>Object.entries()返回一个数组，其元素是与直接在object上找到的可枚举属性键值对相对应的数组。属性的顺序与通过手动循环对象的属性值所给出的顺序相同。\n<br>\n<br><h3>示例</h3></p><pre><code>const obj = { foo: 'bar', baz: 42 };\nconsole.log(Object.entries(obj)); // [ ['foo', 'bar'], ['baz', 42] ]\n\n// array like object\nconst obj = { 0: 'a', 1: 'b', 2: 'c' };\nconsole.log(Object.entries(obj)); // [ ['0', 'a'], ['1', 'b'], ['2', 'c'] ]\n\n// array like object with random key ordering\nconst anObj = { 100: 'a', 2: 'b', 7: 'c' };\nconsole.log(Object.entries(anObj)); // [ ['2', 'b'], ['7', 'c'], ['100', 'a'] ]\n\n// getFoo is property which isn't enumerable\nconst myObj = Object.create({}, { getFoo: { value() { return this.foo; } } });\nmyObj.foo = 'bar';\nconsole.log(Object.entries(myObj)); // [ ['foo', 'bar'] ]\n\n// non-object argument will be coerced to an object\nconsole.log(Object.entries('foo')); // [ ['0', 'f'], ['1', 'o'], ['2', 'o'] ]\n\n// iterate through key-value gracefully\nconst obj = { a: 5, b: 7, c: 9 };\nfor (const [key, value] of Object.entries(obj)) {\n  console.log(`${key} ${value}`); // \"a 5\", \"b 7\", \"c 9\"\n}\n\n// Or, using array extras\nObject.entries(obj).forEach(([key, value]) =&gt; {\nconsole.log(`${key} ${value}`); // \"a 5\", \"b 7\", \"c 9\"\n});</code></pre><p><h3>将Object转换为Map\n</h3>new Map() 构造函数接受一个可迭代的entries。借助Object.entries方法你可以很容易的将Object转换为Map:</p><pre><code>var obj = { foo: \"bar\", baz: 42 };\nvar map = new Map(Object.entries(obj));\nconsole.log(map); // Map { foo: \"bar\", baz: 42 }</code></pre><p><br></p>"}}