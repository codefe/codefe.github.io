{"sta":1,"data":{"subTitle":"Object.isSealed","content":"<p>Object.isSealed() 方法判断一个对象是否被密封。</p><p><h3>语法\n</h3><blockquote>Object.isSealed(obj)\n</blockquote><h3>参数\n</h3>obj\n<br>要被检查的对象。\n<br><h3>返回值\n</h3>表示给定对象是否被密封的一个Boolean 。\n<br>\n<br><h3>描述\n</h3>如果这个对象是密封的，则返回 true，否则返回 false。密封对象是指那些不可 扩展 的，且所有自身属性都不可配置且因此不可删除（但不一定是不可写）的对象。\n<br>\n<br><h3>例子</h3></p><pre><code>// 新建的对象默认不是密封的.\nvar empty = {};\nObject.isSealed(empty); // === false\n\n// 如果你把一个空对象变的不可扩展,则它同时也会变成个密封对象.\nObject.preventExtensions(empty);\nObject.isSealed(empty); // === true\n\n// 但如果这个对象不是空对象,则它不会变成密封对象,因为密封对象的所有自身属性必须是不可配置的.\nvar hasProp = { fee: \"fie foe fum\" };\nObject.preventExtensions(hasProp);\nObject.isSealed(hasProp); // === false\n\n// 如果把这个属性变的不可配置,则这个属性也就成了密封对象.\nObject.defineProperty(hasProp, \"fee\", { configurable: false });\nObject.isSealed(hasProp); // === false\nObject.isSealed(hasProp.fee); // === true\n\n// 最简单的方法来生成一个密封对象,当然是使用Object.seal.\nvar sealed = {};\nObject.seal(sealed);\nObject.isSealed(sealed); // === true\n\n// 一个密封对象同时也是不可扩展的.\nObject.isExtensible(sealed); // === false\n\n// 一个密封对象也可以是一个冻结对象,但不是必须的.\nObject.isFrozen(sealed); // === true ，所有的属性都是不可写的\nvar s2 = Object.seal({ p: 3 });\nObject.isFrozen(s2); // === false， 属性\"p\"可写\n\nvar s3 = Object.seal({ get p() { return 0; } });\nObject.isFrozen(s3); // === true ，访问器属性不考虑可写不可写,只考虑是否可配置</code></pre><p><h3>注意\n</h3>在ES5中，如果这个方法的参数不是一个对象（一个原始类型），那么它会导致TypeError。在ES2015中，非对象参数将被视为是一个密封的普通对象，只返回true。</p><pre><code>Object.isSealed(1);\n// TypeError: 1 is not an object (ES5 code)\n\nObject.isSealed(1);\n// true                          (ES2015 code)</code></pre><p><br></p>"}}