{"sta":1,"data":{"subTitle":"Object.isFrozen","content":"<p>Object.isFrozen()方法判断一个对象是否被冻结。</p><p><h3>语法\n</h3><blockquote>Object.isFrozen(obj)\n</blockquote><h3>参数\n</h3>obj\n<br>被检测的对象。\n<br><h3>返回值\n</h3>表示给定对象是否被冻结的Boolean。\n<br><h3>描述\n</h3>一个对象是冻结的是指它不可扩展，所有属性都是不可配置的，且所有数据属性（即没有getter或setter组件的访问器的属性）都是不可写的。\n<br>\n<br><h3>例子</h3></p><pre><code>// 一个对象默认是可扩展的,所以它也是非冻结的.\nObject.isFrozen({}); // === false\n\n// 一个不可扩展的空对象同时也是一个冻结对象.\nvar vacuouslyFrozen = Object.preventExtensions({});\nObject.isFrozen(vacuouslyFrozen) //=== true;\n\n// 一个非空对象默认也是非冻结的.\nvar oneProp = { p: 42 };\nObject.isFrozen(oneProp) //=== false\n\n// 让这个对象变的不可扩展,并不意味着这个对象变成了冻结对象,\n// 因为p属性仍然是可以配置的(而且可写的).\nObject.preventExtensions(oneProp);\nObject.isFrozen(oneProp) //=== false\n\n// 此时,如果删除了这个属性,则它会成为一个冻结对象.\ndelete oneProp.p;\nObject.isFrozen(oneProp) //=== true\n\n// 一个不可扩展的对象,拥有一个不可写但可配置的属性,则它仍然是非冻结的.\nvar nonWritable = { e: \"plep\" };\nObject.preventExtensions(nonWritable);\nObject.defineProperty(nonWritable, \"e\", { writable: false }); // 变得不可写\nObject.isFrozen(nonWritable) //=== false\n\n// 把这个属性改为不可配置,会让这个对象成为冻结对象.\nObject.defineProperty(nonWritable, \"e\", { configurable: false }); // 变得不可配置\nObject.isFrozen(nonWritable) //=== true\n\n// 一个不可扩展的对象,拥有一个不可配置但可写的属性,则它仍然是非冻结的.\nvar nonConfigurable = { release: \"the kraken!\" };\nObject.preventExtensions(nonConfigurable);\nObject.defineProperty(nonConfigurable, \"release\", { configurable: false });\nObject.isFrozen(nonConfigurable) //=== false\n\n// 把这个属性改为不可写,会让这个对象成为冻结对象.\nObject.defineProperty(nonConfigurable, \"release\", { writable: false });\nObject.isFrozen(nonConfigurable) //=== true\n\n// 一个不可扩展的对象,值拥有一个访问器属性,则它仍然是非冻结的.\nvar accessor = { get food() { return \"yum\"; } };\nObject.preventExtensions(accessor);\nObject.isFrozen(accessor) //=== false\n\n// ...但把这个属性改为不可配置,会让这个对象成为冻结对象.\nObject.defineProperty(accessor, \"food\", { configurable: false });\nObject.isFrozen(accessor) //=== true\n\n// 使用Object.freeze是冻结一个对象最方便的方法.\nvar frozen = { 1: 81 };\nObject.isFrozen(frozen) //=== false\nObject.freeze(frozen);\nObject.isFrozen(frozen) //=== true\n\n// 一个冻结对象也是一个密封对象.\nObject.isSealed(frozen) //=== true\n\n// 当然,更是一个不可扩展的对象.\nObject.isExtensible(frozen) //=== false</code></pre><p><h3>注意\n</h3>在 ES5 中，如果参数不是一个对象类型，将抛出一个TypeError异常。在 ES2015 中，非对象参数将被视为一个冻结的普通对象，因此会返回true。</p><pre><code>Object.isFrozen(1);\n// TypeError: 1 is not an object (ES5 code)\n\nObject.isFrozen(1);\n// true                          (ES2015 code)</code></pre><p><br></p>"}}