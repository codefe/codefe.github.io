{"sta":1,"data":{"subTitle":"Reflect.ownKeys","content":"<p>静态方法 Reflect.ownKeys() 返回一个由目标对象自身的属性键组成的数组。</p><blockquote>Reflect.ownKeys(target)</blockquote><p><br><h3>参数\n</h3>target\n<br>获取自身属性键的目标对象。\n<br><h3>返回值\n</h3>由目标对象的自身属性键组成的 Array。 \n<br>\n<br><h3>异常\n</h3>如果目标不是 Object，抛出一个 TypeError。\n<br>\n<br><h3>描述\n</h3>Reflect.ownKeys 方法返回一个由目标对象自身的属性键组成的数组。它的返回值等同于Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target))。</p><p><br></p><pre><code>const object1 = {\n  property1: 42,\n  property2: 13\n};\n\nconst array1 = [];\n\nconsole.log(Reflect.ownKeys(object1));\n// expected output: Array [\"property1\", \"property2\"]\n\nconsole.log(Reflect.ownKeys(array1));\n// expected output: Array [\"length\"]</code></pre><p><br></p><pre><code>Reflect.ownKeys({z: 3, y: 2, x: 1}); // [ \"z\", \"y\", \"x\" ]\nReflect.ownKeys([]); // [\"length\"]\n\nvar sym = Symbol.for(\"comet\");\nvar sym2 = Symbol.for(\"meteor\");\nvar obj = {[sym]: 0, \"str\": 0, \"773\": 0, \"0\": 0,\n           [sym2]: 0, \"-1\": 0, \"8\": 0, \"second str\": 0};\nReflect.ownKeys(obj);\n// [ \"0\", \"8\", \"773\", \"str\", \"-1\", \"second str\", Symbol(comet), Symbol(meteor) ]\n// Indexes in numeric order,\n// strings in insertion order,\n// symbols in insertion order</code></pre><p><br></p>"}}