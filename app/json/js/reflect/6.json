{"sta":1,"data":{"subTitle":"Reflect.has","content":"<p>静态方法 Reflect.has() 作用与 in 操作符 相同。</p><blockquote>Reflect.has(target, propertyKey)</blockquote><p>target\n<br>目标对象.\n<br>propertyKey\n<br>属性名，需要检查目标对象是否存在此属性。\n<br>\n<br>返回值\n<br>一个 Boolean 类型的对象指示是否存在此属性。</p><blockquote><p>Reflect.has({x: 0}, \"x\"); // true\n<br>Reflect.has({x: 0}, \"y\"); // false\n<br>\n<br>// 如果该属性存在于原型链中，返回true\n<br>Reflect.has({x: 0}, \"toString\");\n<br>\n<br>// Proxy 对象的 .has() 句柄方法\n<br>obj = new Proxy({}, {\n<br>  has(t, k) { return k.startsWith(\"door\"); }\n<br>});\n<br>Reflect.has(obj, \"doorbell\"); // true\n<br>Reflect.has(obj, \"dormitory\"); // false</p></blockquote>"}}