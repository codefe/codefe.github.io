{"sta":1,"data":{"subTitle":"Reflect.preventExtensions","content":"<p>静态方法 Reflect.preventExtensions() 方法阻止新属性添加到对象 (例如：防止将来对对象的扩展被添加到对象中)。该方法与 Object.preventExtensions()相似，但有一些不同点。</p><p><h3>语法\n</h3>Reflect.preventExtensions(target)\n<br><h3>参数\n</h3>target\n<br>阻止扩展的目标对象。\n<br><h3>返回值\n</h3>返回一个 Boolean 值表明目标对象是否成功被设置为不可扩展。\n<br>\n<br><h3>异常\n</h3>抛出一个 TypeError 错误，如果 target 不是 Object。\n<br>\n<br><h3>描述\n</h3>Reflect.preventExtensions 方法阻止新属性添加到对象 (例如：防止将来对对象的扩展被添加到对象中)。该方法与  Object.preventExtensions() 方法相似。</p><h3>使用 Reflect.preventExtensions()</h3><p>&nbsp;<span style=\"background-color: rgb(241, 241, 241); white-space: pre-wrap;\">// Objects are extensible by default.</span></p><pre><code>var empty = {};\nReflect.isExtensible(empty); // === true\n\n// ...but that can be changed.\nReflect.preventExtensions(empty);\nReflect.isExtensible(empty); // === false</code></pre><p><br></p><h3>与 Object.preventExtensions() 的不同点</h3><p>&nbsp;\n<br>如果该方法的 target 参数不是一个对象（是原始值），那么将造成一个 TypeError 异常。 对于Object.preventExtensions() 方法， 非对象的 target 参数将被强制转换为对象。</p><pre><code>Reflect.preventExtensions(1);\n// TypeError: 1 is not an object\n\nObject.preventExtensions(1);\n// 1</code></pre><p><br></p>"}}