{"sta":1,"data":{"subTitle":"WeakSet","content":"<p>WeakSet 对象允许你将弱保持对象存储在一个集合中。</p><p><h3>语法\n</h3><blockquote> new WeakSet([iterable]);\n</blockquote><h3>参数\n</h3>iterable\n<br>如果传入一个可迭代对象作为参数, 则该对象的所有迭代值都会被自动添加进生成的 WeakSet 对象中。null 被认为是 undefined。\n<br>示例</p><pre><code>var ws = new WeakSet();\nvar foo = {};\nvar bar = {};\n\nws.add(foo);\nws.add(bar);\n\nws.has(foo);    // true\nws.has(bar);   // true\n\nws.delete(foo); // 从set中删除 foo 对象\nws.has(foo);    // false, foo 对象已经被删除了\nws.has(bar);    // true, bar 依然存在</code></pre><p>注意， foo  !==  bar。 尽管它们是相似的对象，但是它们不是同一个对象。因此，它们都可以被加入到set中。\n<br>\n<br><h3>描述\n</h3>WeakSet 对象是一些对象值的集合, 并且其中的每个对象值都只能出现一次。在WeakSet的集合中是唯一的\n<br>\n<br>它和 Set 对象的区别有两点:\n<br>\n<br>与Set相比，WeakSet 只能是对象的集合，而不能是任何类型的任意值。\n<br>WeakSet持弱引用：集合中对象的引用为弱引用。 如果没有其他的对WeakSet中对象的引用，那么这些对象会被当成垃圾回收掉。 这也意味着WeakSet中没有存储当前对象的列表。 正因为这样，WeakSet 是不可枚举的。</p>"}}