{"sta":1,"data":{"subTitle":"斐波那契数列","content":"<p><h3>参考实现\n</h3>数学上是以递归的方法来定义</p><pre><code>F(0) = 0;\nF(1) = 1;\nF(n) = F(n - 1) + F(n - 2);</code></pre><h3>公式版：递归</h3><pre><code>function fib(n) {\n  if(n &lt; 0) throw new Error('输入的数字不能小于0');\n  if (n &lt; 2) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n}</code></pre><p>正常递归版本是一个既简单又直接的逻辑，但是这个版本有个问题就是存在大量重复计算。如：当 n 为 5 的时候要计算fib(4) + fib(3)当 n 为 4 的要计算fib(3) + fib(2) ，这时fib(3)就是重复计算了。运行 fib(50) 等半天才会出结果。</p><h3>性能大幅提升</h3><pre><code>function fibonacci3(n) {\n    let pre1 = 1;\n    let pre2 = 1;\n    let current = 2;\n\n    if (n &lt;= 2) {\n        return current;\n    }\n\n    for (let i = 2; i &lt; n; i++) {\n        pre1 = pre2;\n        pre2 = current;\n        current = pre1 + pre2;\n    }\n\n    return current;\n}\n\nconsole.time(\"time\");\nconsole.log(fibonacci3(10000));\nconsole.timeEnd(\"timed\");</code></pre><p><br></p>"}}