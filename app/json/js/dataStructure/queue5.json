{"sta":1,"data":{"subTitle":"队列的应用,用队列实现一个栈","content":"<p><strong>用队列实现一个栈</strong></p><p><strong>要求：</strong> 用两个队列实现一个栈。</p><p><strong>分析：</strong> 使用队列实现栈最主要的是在队列中找到栈顶元素并对其操作。具体的思路如下：</p><p>1、两个队列，一个备份队列&nbsp;emptyQueue，一个是数据队列&nbsp;dataQueue；</p><p></p><p>2、在确认栈顶时，依次&nbsp;dequeue至备份队列，置换备份队列和数据队列的引用即可。</p><pre>class QueueStack {\n\n  constructor() {\n\n    this.queue_1 = new Queue();\n\n    this.queue_2 = new Queue();\n\n    this._dataQueue = null; // 放数据的队列\n\n    this._emptyQueue = null; // 空队列,备份使用\n\n  }\n\n  // 确认哪个队列放数据,哪个队列做备份空队列\n\n  _initQueue() {\n\n    if (this.queue_1.isEmpty() &amp;&amp; this.queue_2.isEmpty()) {\n\n      this._dataQueue = this.queue_1;\n\n      this._emptyQueue = this.queue_2;\n\n    } else if (this.queue_1.isEmpty()) {\n\n      this._dataQueue = this.queue_2;\n\n      this._emptyQueue = this.queue_1;\n\n    } else {\n\n      this._dataQueue = this.queue_1;\n\n      this._emptyQueue = this.queue_2;\n\n    }\n\n  };\n\n  push(item) {\n\n    this.init_queue();\n\n    this._dataQueue.enqueue(item);\n\n  };\n\n  peek() {\n\n    this.init_queue();\n\n    return this._dataQueue.tail();\n\n  }\n\n  pop() {\n\n    this.init_queue();\n\n    while (this._dataQueue.size() &gt; 1) {\n\n      this._emptyQueue.enqueue(this._dataQueue.dequeue());\n\n    }\n\n    return this._dataQueue.dequeue();\n\n  };\n\n};\n\n同样的，一个队列也能实现栈的基本功能：\n\nclass QueueStack {\n\n  constructor() {\n\n    this.queue = new Queue();\n\n  }\n\n  push(item) {\n\n    this.queue.enqueue(item);\n\n  }\n\n  pop() {\n\n    // 向队列末尾追加 队列长度-1 次，后弹出队列头部\n\n    for(let i = 1; i &lt; this.queue.size(); i += 1) {\n\n      this.queue.enqueue(this.queue.dequeue());\n\n    }\n\n    return this.queue.dequeue();\n\n  }\n\n  peek() {\n\n    return this.queue.tail();\n\n  }\n\n}</pre><p><br></p>"}}