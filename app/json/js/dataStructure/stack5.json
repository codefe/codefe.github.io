{"sta":1,"data":{"subTitle":"栈的应用,利用普通栈实现一个有min方法的栈","content":"<p><strong>利用普通栈实现一个有 min方法的栈</strong></p><p></p><p><strong>思路：</strong> 使用两个栈来存储数据，其中一个命名为 dataStack，专门用来存储数据，另一个命名为 minStack，专门用来存储栈里最小的数据。始终保持两个栈中的元素个数相同，压栈时判别压入的元素与 minStack栈顶元素比较大小，如果比栈顶元素小，则直接入栈，否则复制栈顶元素入栈；弹出栈顶时，两者均弹出即可。这样 minStack的栈顶元素始终为最小值。</p><pre>class MinStack {\n\n  constructor() {\n\n    this._dataStack = new Stack();\n\n    this._minStack = new Stack();\n\n  }\n\n  push(item) {\n\n    this._dataStack.push(item);\n\n    // 为空或入栈元素小于栈顶元素，直接压入该元素\n\n    if (this._minStack.isEmpty() || this._minStack.peek() &gt; item) {\n\n      this._minStack.push(item);\n\n    } else {\n\n      this._minStack.push(this._minStack.peek());\n\n    }\n\n  }\n\n  pop() {\n\n    this._dataStack.pop();\n\n    return this._minStack.pop();\n\n  }\n\n  min() {\n\n    return this._minStack.peek();\n\n  }\n\n}\n\nconst minstack = new MinStack();\n\nminstack.push(3);\n\nminstack.push(4);\n\nminstack.push(8);\n\nconsole.log(minstack.min()); // 3\n\nminstack.push(2);\n\nconsole.log(minstack.min()); // 2</pre><p><br></p>"}}