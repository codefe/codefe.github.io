{"sta":1,"data":{"subTitle":"简单页面分析","content":"<p>首先我们分析一个简单页面从空白页面到渲染完毕的过程。本文所有示例页面都放在下面的仓库里，通过命令克隆并切换到仓库根目录：<br></p><pre><code>git clone git@github.com:pobusama/chrome-preformance-use-demo.git &amp;&amp; cd chrome-preformance-use-demo</code></pre><p>接着安装依赖包：</p><p><blockquote>npm i\n</blockquote>\n最后启动示例页面：</p><blockquote>npm run demo1</blockquote><p><img src=\"./app/json/tools/Performance/img/3.jpeg\" style=\"max-width:100%;\" class=\"\"></p><p>由于很难把握页面开始渲染的时机，我们通过第二种 reload 方式收集渲染数据，将 beforeunload -&gt; unload -&gt; Send Request（第一个资源请求） -&gt; load 的过程都记录下来。\n<br>\n<br>在工具自动停止记录后，我们得到了这样一份报告：</p><p><img src=\"./app/json/tools/Performance/img/4.jpeg\" style=\"max-width:100%;\" class=\"\"></p><p>图中划出的 4 个区域分别是：\n<br>\n<br>1：控制面板，用来控制工具的特性。「Network」与「CPU」：分别限制网络和计算资源，模拟不同终端环境，可以更容易观测到性能瓶颈。「Disable JavaScript samples」选项开启会使工具忽略记录 JS 的调用栈，这个我们之后会再提到。打开「Enable advanced paint instrumentation」则会详细记录某些渲染事件的细节，这个功能我们在了解这些事件后再聊。\n<br>\n<br>2：概览面板，其中有描述帧率（FPS）、CPU 使用率、网络资源情况的 3 个图表。帧率是描绘每秒钟渲染多少帧图像的指标，帧率越高则在观感上更流畅。网络情况是以瀑布图的形式呈现，图中可以观察到各资源的加载时间与顺序。CPU 使用率面积图的其实是一张连续的堆积柱状图（下面 CPU 面积图放大版为示意图，数据非严谨对应）：</p><p><img src=\"./app/json/tools/Performance/img/5.jpeg\" style=\"max-width:100%;\" class=\"\"></p><p>其纵轴是 CPU 使用率，横轴是时间，不同的颜色代表着不同的事件类型，其中：\n<br>\n<br>1、蓝色：加载（Loading）事件\n<br>\n<br>2、黄色：脚本运算（Scripting）事件\n<br>\n<br>3、紫色：渲染（Rendering）事件\n<br>\n<br>4、绿色：绘制（Painting）事件\n<br>\n<br>5、灰色：其他（Other）\n<br>\n<br>6、闲置：浏览器空闲\n<br>\n<br>举例来说，示意图的第一列：总 CPU 使用率为 18，加载事件（蓝色）和脚本运算事件（黄色）各占了一半（9）。随着时间增加，脚本运算事件的 CPU 使用率逐渐增加，而加载事件的使用率在 600ms 左右降为 0；另一方面渲染事件（紫色）的使用率先升后降，在 1100ms 左右降为 0。整张图可以清晰地体现哪个时间段什么事件占据 CPU 多少比例的使用率。</p><p><img src=\"./app/json/tools/Performance/img/6.jpeg\" style=\"max-width:100%;\" class=\"\"></p><p>3：线程面板，用以观察细节事件，在概览面板缩小观察范围可以看到线程图的细节。其中主线程火焰图是用来分析渲染性能的主要图表。不同于「正常」火焰图，这里展示的火焰图是倒置的，即最上层是父级函数或应用，越往下则调用栈越浅，最底层的一小格（如果时间维度拉得不够长，看起来像是一小竖线）表示的是函数调用栈顶层。\n<br>\n<br>默认情况下火焰图会记录已执行 JS 程序调用栈中的每层函数（精确到单个函数的粒度），非常详细。而开启「Disable JS Samples」后，火焰图只会精确到事件级别（调用某个 JS 文件中的函数是一个事件），忽略该事件下的所有 JS 函数调用栈。</p><p><img src=\"./app/json/tools/Performance/img/7.jpeg\" style=\"max-width:100%;\" class=\"\"></p><p>此外，帧线程时序图（Frames）和网络瀑布图（Network）可以从时间维度分别查看绘制出的页面和资源加载情况。</p><p><img src=\"./app/json/tools/Performance/img/8.jpeg\" style=\"max-width:100%;\" class=\"\"></p><p>4：详情面板。前面已经多次提到事件，我想如果再不解释可能要被寄刀片了。Performance 工具中，所有的记录的最细粒度就是事件。这里的事件不是指 JS 中的事件，而是一个抽象概念，我们打开主线程火焰图，随意点击一个方块，就可以在详情面板里看到该事件的详情，包括事件名、事件耗时、发起者等信息。举几个例子：Parse HTML 是一种 Loading 事件（蓝色），它表示在在事件时间内，Chrome 正在执行其 HTML 解析算法；Event 是一种 Scripting 事件（黄色），它表示正在执行 JS 事件（例如 click）；Paint 是一种绘制事件（绿色），表示 Chrome 将合成的图层绘制出来。</p><p></p><p><img src=\"./app/json/tools/Performance/img/9.jpeg\" style=\"max-width:100%;\" class=\"\"></p><p>以下是一些常见事件，有个印象就好，由于每次做性能分析必会跟它们打交道，我们想不记住他们也难。</p><p><img src=\"./app/json/tools/Performance/img/10.jpeg\" style=\"max-width:100%;\" class=\"\"></p><p>详情面板还有非常重要的一部分就是事件耗时饼状图，它列出了你选择的时间段内，不同类型事件（加载、脚本运算、渲染、绘制、其他事件、发呆:) ）所占的比例和耗费的时间。分析耗时占比与分析 CPU 面积图有相通的意义 —— 到底是哪种事件消耗了大量算力和时间，导致了性能瓶颈。</p><p><img src=\"./app/json/tools/Performance/img/11.jpeg\" style=\"max-width:100%;\"></p><p>至此，我们扫了一遍 Performance 工具的主要功能，虽然没有面面俱到，但足以开启性能分析之旅。接下来我们分析一个稍微复杂些的动画页面，真正理解使用这些图表数据如何定位性能问题。</p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>"}}