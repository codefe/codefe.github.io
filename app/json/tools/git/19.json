{"sta":1,"data":{"subTitle":"解决远程冲突","content":"<p>由于有 code review 的存在，有可能出现这种情况：同时有多个人的代码被 review，如果有一个人改了与你相同地方的代码，并且他的代码先通过 review 并被合进了远程代码库。当你的代码通过 review 并进行合并，此时会产生冲突。由于冲突是发生在远端，不能采用在本地 rebase 的办法，此时需要采取以下步骤来解决冲突：<br></p><pre><code># 进入工程，假设是ProjectA  \ncd ProjectA  \n# 切换到需要被合并的特征分支，例如 FixForBug1922  \ngit checkout FixForBug1922  \n# 从远程获取代码  \ngit fetch origin  \n# rebase 到远程分支，命令为 git rebase origin/&lt;remote_branch&gt;  \ngit rebase origin/1.0.1  \n  \n# rebase 的时候会提示冲突，手动合并冲突  \n  \n# 将解决冲突后的文件重新加入  \ngit add &lt;conflict_file&gt;  \n# 继续 rebase  \ngit rebase --continue  \n# 成功后将最新的特征分支 push 到远端  \ngit push origin FixForBug1922:refs/for/1.0.1</code></pre><p><font color=\"#c24f4a\">注意：push 后需要重新进行 code review。\n</font><br>\n<br>以上步骤中有一步：git fetch 。fetch 是比 pull 更细粒度的操作。fetch 是将远端的代码拿下来，而 pull 是执行 fetch 后再与本地的代码合并。所以上面的命令实际是告诉 git 把远端的代码拿下来，但是不要合并（因为我们现在是在特征分支上，合并肯定会冲突出错）。fetch 命令会自动在本地创建一个远程分支的本地拷贝，此拷贝我们不能直接操作（如果你强行调用 git checkout 去切入这个拷贝，git 会自动创建一个本地分支，并切入到那个自动创建的本地分支上）。我们还是使用 rebase 命令重新放置特征分支并解决冲突。</p>"}}