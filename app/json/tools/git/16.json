{"sta":1,"data":{"subTitle":"git push","content":"<p><code>git push</code>命令用于将本地分支的更新，推送到远程主机。它的格式与<code>git pull</code>命令相仿。<br></p><p><blockquote>$ git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;\n</blockquote>注意，分支推送顺序的写法是&lt;来源地&gt;:&lt;目的地&gt;，所以git pull是&lt;远程分支&gt;:&lt;本地分支&gt;，而git push是&lt;本地分支&gt;:&lt;远程分支&gt;。\n<br>\n<br>如果省略远程分支名，则表示将本地分支推送与之存在\"追踪关系\"的远程分支（通常两者同名），如果该远程分支不存在，则会被新建。<br><blockquote>$ git push origin master\n</blockquote>上面命令表示，将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建。\n<br>\n<br>如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。<br><blockquote>$ git push origin :master<br>\n# 等同于<br>\n$ git push origin --delete master\n</blockquote>上面命令表示删除origin主机的master分支。\n<br>\n<br>如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。<br><blockquote>$ git push origin\n</blockquote>上面命令表示，将当前分支推送到origin主机的对应分支。\n<br>\n<br>如果当前分支只有一个追踪分支，那么主机名都可以省略。<br><blockquote>$ git push\n</blockquote>如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用git push。<br><blockquote>$ git push -u origin master\n</blockquote>上面命令将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了。\n<br>\n<br>不带任何参数的git push，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。Git 2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。如果要修改这个设置，可以采用git config命令。<br><blockquote>$ git config --global push.default matching<br>\n# 或者<br>\n$ git config --global push.default simple\n</blockquote>还有一种情况，就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用--all选项。<br><blockquote>$ git push --all origin\n</blockquote>上面命令表示，将所有本地分支都推送到origin主机。\n<br>\n<br>如果远程主机的版本比本地版本更新，推送时Git会报错，要求先在本地做git pull合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用--force选项。<br><blockquote>$ git push --force origin \n</blockquote>上面命令使用--force选项，结果导致远程主机上更新的版本被覆盖。除非你很确定要这样做，否则应该尽量避免使用--force选项。\n<br>\n<br>最后，git push不会推送标签（tag），除非使用--tags选项。<br><blockquote>$ git push origin --tags</blockquote></p>"}}