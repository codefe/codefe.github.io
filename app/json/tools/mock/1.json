{"sta":1,"data":{"subTitle":"mockjs的基础语法","content":"<p>mockjs 的语法由三部分组成：<br></p><pre><code>'name | rule': value\n// '字段名 | 规则': 属性值</code></pre><p>这里要注意的是，属性值 value用来提供生成值类型，并非具体值，比如 value 为 12 则是生成数字，为 hi 则是字符串。\n<br>\n<br>生成规则有 7 种语法，这里简单整理了下，更详细的规则可查阅官方文档。</p><pre><code>'name|count': value\n// 重复 value count 次，value 为 number 时只生成 count\n// value 为 array ，获取 array 其中一个\n// value 为 object，随机获取 count 个属性\n// value 为 boolean，随机一个布尔值，一般是 1 表示 50% 的\n\n'name|min-max': value\n// value 为 string，随机重复 value，最小 min 次最多 max 次\n// value 为 number，随机 min 到 max 其中一个数字\n// value 为 array，随机重复 min 到 max 次 array 值\n// value 为 object，随机获取 min 都 max 个属性\n// value 为 boolean，以概率计算得出布尔值\n\n'name|min-max.dmin-dmax': value\n// value 为 number，生成一个浮点数，小数点是 dmin 到 dmax\n// value 为 string 时，重复随机 min 到 max 次\n\n'name|min-max.dcount': value\n// value 为 number 时，生成最 min 到 max 之间的数，并且浮点数为 dcount 个\n\n'name|count.dmin-dmax': value\n// value 为 number，生成带 dmin 到 dmax 个数浮点数的 count\n\n'name|count.dcount': value\n// value 为 number 是，生成 dcount 个浮点数的 count\n\n'name|+step': value\n// value 为 number，每次生成 +1 的</code></pre><p>特殊情况：</p><blockquote>name: function(){} function 的执行值为 name 的值<br>\nname: /[a-z][A-Z][0-9]/ 生成匹配正则的字符串</blockquote><p>字段之间也可以嵌套，详见 http://mockjs.com/examples.html</p><p>常见随机值 Mockjs 提供 Random API 来返回常见的数据比如 邮箱，网址，名字等，也可以使用占位符的形式来是国内成数据：</p><pre><code>const Random = Mock.Random;\nRandom.email();\n// =&gt; \"n.clark@miller.io\"\n\nMock.mock(\"@email\");\n// =&gt; \"y.lee@lewis.org\"\n\nMock.mock({ email: \"@email\" });\n// =&gt; { email: \"v.lewis@hall.gov\" }</code></pre><p>mockjs 提供了很多可以模拟的数据类型：</p><p><img src=\"./app/json/tools/mock/img/1.png\" style=\"max-width:100%;\"></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>"}}