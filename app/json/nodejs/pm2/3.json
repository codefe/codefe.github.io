{"sta":1,"data":{"subTitle":"PM2命令大全","content":"<pre><code>npm install pm2 -g     # 命令行安装 pm2 \npm2 start app.js -i 4 #后台运行pm2，启动4个app.js \n                                # 也可以把'max' 参数传递给 start\n                                # 正确的进程数目依赖于Cpu的核心数目\npm2 start app.js --name my-api # 命名进程\npm2 list               # 显示所有进程状态\npm2 monit              # 监视所有进程\npm2 logs               #  显示所有进程日志\npm2 stop all           # 停止所有进程\npm2 restart all        # 重启所有进程  pm2 reload all         # 0秒停机重载进程 (用于 NETWORKED 进程)\npm2 stop 0             # 停止指定的进程\npm2 restart 0          # 重启指定的进程\npm2 startup            # 产生 init 脚本 保持进程活着\npm2 web                # 运行健壮的 computer API endpoint (http://localhost:9615)\npm2 delete 0           # 杀死指定的进程\npm2 delete all         # 杀死全部进程</code></pre><p>运行进程的不同方式：</p><pre><code>pm2 start app.js -i max  # 根据有效CPU数目启动最大进程数目\npm2 start app.js -i 3      # 启动3个进程\npm2 start app.js -x        #用fork模式启动 app.js 而不是使用 cluster\npm2 start app.js -x -- -a 23   # 用fork模式启动 app.js 并且传递参数 (-a 23)\npm2 start app.js --name serverone  # 启动一个进程并把它命名为 serverone\npm2 stop serverone       # 停止 serverone 进程\npm2 start app.json        # 启动进程, 在 app.json里设置选项\npm2 start app.js -i max -- -a 23                   #在--之后给 app.js 传递参数\npm2 start app.js -i max -e err.log -o out.log  # 启动 并 生成一个配置文件\n你也可以执行用其他语言编写的app  ( fork 模式):\npm2 start my-bash-script.sh    -x --interpreter bash\npm2 start my-python-script.py -x --interpreter python</code></pre><p><br></p>"}}