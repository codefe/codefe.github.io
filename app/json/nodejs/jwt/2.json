{"sta":1,"data":{"subTitle":"JWT的数据结构","content":"<p>实际的 JWT 大概就像下面这样。<br></p><pre><code>dfdsfdfdfdfdfdfdfdfdfdf.\ndfsdfdfdfdjfioeurejdjfdfdifdkfjdifudsfjdfjdkdjfkdjfdjfdsffdfd.\nfdfdsfdfdsfdfdfdfdsfdfdf</code></pre><p>它是一个很长的字符串，中间用点（.）分隔成三个部分。注意，JWT 内部是没有换行的，这里只是为了便于展示，将它写成了几行。\n<br>\n<br>JWT 的三个部分依次如下。</p><pre><code>Header（头部）\nPayload（负载）\nSignature（签名）</code></pre><p>写成一行，就是下面的样子。</p><pre><code>Header.Payload.Signature</code></pre><h3>Header</h3><p>Header 部分是一个 JSON 对象，描述 JWT 的元数据，通常是下面的样子。</p><pre><code>{\n  \"alg\": \"HS256\",\n  \"typ\": \"JWT\"\n}</code></pre><p>上面代码中，alg属性表示签名的算法（algorithm），默认是 HMAC SHA256（写成 HS256）；typ属性表示这个令牌（token）的类型（type），JWT 令牌统一写为JWT。\n<br>\n<br>最后，将上面的 JSON 对象使用 Base64URL 算法转成字符串。</p><h3>Payload</h3><p>Payload 部分也是一个 JSON 对象，用来存放实际需要传递的数据。JWT 规定了7个官方字段，供选用。</p><pre><code>iss (issuer)：签发人\nexp (expiration time)：过期时间\nsub (subject)：主题\naud (audience)：受众\nnbf (Not Before)：生效时间\niat (Issued At)：签发时间\njti (JWT ID)：编号</code></pre><p>除了官方字段，你还可以在这个部分定义私有字段，下面就是一个例子。</p><pre><code>{\n  \"sub\": \"1234567890\",\n  \"name\": \"John Doe\",\n  \"admin\": true\n}</code></pre><p>注意，JWT 默认是不加密的，任何人都可以读到，所以不要把秘密信息放在这个部分。\n<br>\n<br>这个 JSON 对象也要使用 Base64URL 算法转成字符串。</p><h3>Signature</h3><p>Signature 部分是对前两部分的签名，防止数据篡改。\n<br>\n<br>首先，需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户。然后，使用 Header 里面指定的签名算法（默认是 HMAC SHA256），按照下面的公式产生签名。</p><pre><code>HMACSHA256(\n  base64UrlEncode(header) + \".\" +\n  base64UrlEncode(payload),\n  secret)</code></pre><p>算出签名以后，把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用\"点\"（.）分隔，就可以返回给用户。</p><h3>Base64URL</h3><p>前面提到，Header 和 Payload 串型化的算法是 Base64URL。这个算法跟 Base64 算法基本类似，但有一些小的不同。\n<br>\n<br>JWT 作为一个令牌（token），有些场合可能会放到 URL（比如 api.example.com/?token=xxx）。Base64 有三个字符+、/和=，在 URL 里面有特殊含义，所以要被替换掉：=被省略、+替换成-，/替换成_ 。这就是 Base64URL 算法。</p>"}}