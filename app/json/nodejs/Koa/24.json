{"sta":1,"data":{"subTitle":"Koa2操作mysql数据库","content":"<h3>1、安装MySQL数据库</h3><p><a href=\"https://www.mysql.com/downloads/\" target=\"_blank\">https://www.mysql.com/downloads/</a><br><br><h3>2、安装 node.js的mysql模块\n</h3><blockquote>npm install --save mysql\n</blockquote>\n<br>模块介绍\n<br>mysql模块是node操作MySQL的引擎，可以在node.js环境下对MySQL数据库进行建表，增、删、改、查等操作。\n<br><br><h3>3、开始使用</h3>创建数据库会话</p><pre>const mysql      = require('mysql')\nconst connection = mysql.createConnection({\n  host     : '127.0.0.1',   // 数据库地址\n  user     : 'root',    // 数据库用户\n  password : '123456'   // 数据库密码\n  database : 'my_database'  // 选中数据库\n})\n \n// 执行sql脚本对数据库进行读写 \nconnection.query('SELECT * FROM my_table',  (error, results, fields) =&gt; {\n  if (error) throw error\n  // connected! \n  \n  // 结束会话\n  connection.release() \n});</pre><p>注意：一个事件就有一个从开始到结束的过程，数据库会话操作执行完后，就需要关闭掉，以免占用连接资源。\n<br>创建数据连接池\n<br><br>一般情况下操作数据库是很复杂的读写过程，不只是一个会话，如果直接用会话操作，就需要每次会话都要配置连接参数。所以这时候就需要连接池管理会话。<br>\n<br><blockquote>const mysql = require('mysql')</blockquote></p><pre>// 创建数据池\nconst pool  = mysql.createPool({\n  host     : '127.0.0.1',   // 数据库地址\n  user     : 'root',    // 数据库用户\n  password : '123456'   // 数据库密码\n  database : 'my_database'  // 选中数据库\n})</pre><pre>// 在数据池中进行会话操作\npool.getConnection(function(err, connection) {\n   \n  connection.query('SELECT * FROM my_table',  (error, results, fields) =&gt; {\n    \n    // 结束会话\n    connection.release();\n \n    // 如果有错误就抛出\n    if (error) throw error;\n  })\n})</pre><p><br></p>"}}