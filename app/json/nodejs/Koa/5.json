{"sta":1,"data":{"subTitle":"Koa中间件","content":"<p>通俗的讲就是：中间件匹配路由之前或路由完成之后做的一系列操作。<br></p><p><h3>中间件的功能：\n</h3>1. 执行任何代码\n<br>2. 修改请求或响应对象\n<br>3. 终结请求或响应循环\n<br>4. 调用堆栈中的下一个中间件\n<br>\n<br><blockquote>如果get、post回调函数中，没有next参数，就匹配上第一个路由，就不会往下匹配了，如果想住下匹配的话，就需要写next()\n</blockquote>\n</p><p>\n<br><h3>中间件执行顺序</h3></p><p><blockquote>洋葱头顺序，从上到下，再从下到上依次执行</blockquote>例: 执行一个/news的路由\n<br></p><pre>app.use(async (ctx,next)=&gt;{\nconsole.log('1. 这是第一个中间件')\nawait next()\nconsole.log('5. 匹配路由完成以后又返回来执行中间件')\n})\n\napp.use(async (ctx,next)=&gt;{\nconsole.log('2. 这是第二个中间件')\nawait next()\nconsole.log('4. 匹配路由完成以后又返回来执行中间件')\n})\n\nrouter.get('/news', async (ctx)=&gt;{\nctx.body = '3. 这是匹配到的路由'\n})</pre><p><br></p><p><h3>中间件类型：\n</h3>1. 应用级中间件\n<br>2. 路由级中间件\n<br>3. 错误处理中间件\n<br>4. 第三方中间件</p><p>&nbsp;</p><p><h3>1. 应用级中间件\n</h3>//如果一个参数是匹配所有路由，如果二个参数，是匹配某个路由\n<br></p><pre>app.use(async (ctx[,next])=&gt;{\nctx.body = '这是一个中间件'\n//await next()\n})</pre><p><br></p><p><h3>2. 路由中间件\n</h3></p><pre>router.get('/news', async (ctx,next)=&gt;{\nconsole.log('这是一个路由')\nawait next()//如果没有这个，下面的路由不会执行\n})\nrouter.get('/news', async (ctx)=&gt;{\nctx.body = '这是一个新闻';\n})</pre><p><br></p><h3>3. 错误处理中间件\n</h3><pre>app.use(async (ctx,next)=&gt;{\n    \n    next();//找匹配的路由，如果有执行完成之后再执行下面的if，如果没找到直接执行下面的if\n    \n    if(ctx.status==404){\n        ctx.status = 404;\n        ctx.body = '这是一个404页面';\n    }\n})</pre><h3>4.&nbsp;第三方中间件，请参照post提交数据</h3><p><br></p><p><br></p><p><br></p><p>\n<br></p>"}}