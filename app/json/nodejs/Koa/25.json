{"sta":1,"data":{"subTitle":"Koa2中集成GraphQl实现 Server API 接口","content":"<p>GraphQL是一种新的API 的查询语言，它提供了一种更高效、强大和灵活API 查询。它弥补了RESTful API（字段冗余，扩展性差、无法聚合api、无法定义数据类型、网络请求次数多）等不足。<br></p><p><h3>GraphQL的优点：</h3>1、吸收了RESTful API的特性。<br>2、所见即所得<br>各种不同的前端框架和平台可以指定自己需要的字段。查询的返回结果就是输入的查询结构的精确映射<br>3、客户端可以自定义Api聚合。<br>如果设计的数据结构是从属的，直接就能在查询语句中指定;即使数据结构是独立的，也可以在查询语句中指定上下文，只需要一次网络请求，就能获得资源和子资源的数据。<br>4、代码即是文档<br>GraphQL会把schema定义和相关的注释生成可视化的文档，从而使得代码的变更，直接就反映到最新的文档上，避免RESTful中手工维护可能会造成代码、文档不一致的问题。<br>5、参数类型强校验<br>RESTful方案本身没有对参数的类型做规定，往往都需要自行实现参数的校验机制，以确保安全。\n<br>但GraphQL提供了强类型的schema机制，从而天然确保了参数类型的合法性。</p><p><br></p><p><h3>下面我们看看Koa2中集成GraphQl实现 Server API 接口：\n</h3>\n<br>1、找到koa-graphql官方文档\n<br>https://github.com/chentsulin/koa-graphql\n<br><br>2、安装koa-graphql   graphql   koa-mount<br> npm install graphql  koa-graphql  koa-mount --save</p><p><br>3、引入koa-graphql配置中间件</p><pre>const Koa = require('koa');\nconst mount = require('koa-mount');\nconst graphqlHTTP = require('koa-graphql');\nconst GraphQLSchema=require('./schema/default.js');\nconst app = new Koa();\napp.use(mount('/graphql', graphqlHTTP({\n  schema: GraphQLSchema,\n  graphiql: true\n})));\napp.listen(4000)</pre><p>4、定义GraphQLSchema  \n<br>\n<br>1、新建schema/default.js\n<br>2、定义Schema</p><pre>const DB=require('../model/db.js');\n      const {\n          GraphQLObjectType,\n          GraphQLString,\n          GraphQLInt,\n          GraphQLSchema,\n          GraphQLList          \n        } = require('graphql');  \n\n\n      //定义导航Schema类型\n      var GraphQLNav=new GraphQLObjectType({\n          name:'nav',\n          fields:{\n              title:{ type: GraphQLString },\n              url:{ type: GraphQLString },\n              sort:{ type: GraphQLInt },\n              status:{type:GraphQLInt},\n              add_time:{ type: GraphQLString }\n          }\n      })\n\n\n      //定义根\n      var Root = new GraphQLObjectType({\n        name: \"RootQueryType\",\n        fields: {\n          navList: {\n            type: GraphQLList(GraphQLNav),\n            async resolve(parent, args) {\n              var navList=await DB.find('nav',{});\n              console.log(navList)\n              return navList;\n            }\n          }\n        }\n      })\n\n //增加数据\n\n\nconst MutationRoot = new GraphQLObjectType({\n  name: \"Mutation\",\n  fields: {\n    addNav: {\n      type: GraphQLNav,\n      args: {\ntitle: { type: new GraphQLNonNull(GraphQLString) },\ndescription:{ type: new GraphQLNonNull(GraphQLString) },\nkeywords:{ type: GraphQLString },\npid:{ type: GraphQLString},\nadd_time:{ type: GraphQLString},\nstatus:{ type: GraphQLID}\n      },\n      async resolve(parent, args) {        \nvar cateList=await DB.insert('nav',{title:args.title,description:args.description,keywords:args.keywords,pid:0,add_time:'',status:1});        \nconsole.log(cateList.ops[0]);\nreturn cateList.ops[0];\n      }\n    }\n  }\n})\n\n\n\n      \nmodule.exports = new GraphQLSchema({\n    query: QueryRoot,\n    mutation:MutationRoot  \n});</pre><p>5、使用\n<br>\n<br>GraphQl增加数据</p><pre>mutation{\n    addNav(title:\"测试导航\",description:\"描述\"){\n        title\n    }\n}</pre><p>GraphQl查询数据</p><pre>{  \n  articleList{\n    title,\n    cateList{\n      title,\n      description\n    \n    }\n  }\n}</pre><p><img src=\"/app/json/nodejs/Koa/imgs/graphql.png\" style=\"max-width:100%;\"></p><p><br></p>"}}