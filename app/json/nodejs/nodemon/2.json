{"sta":1,"data":{"subTitle":"通过配置nodemon.json文件来使用","content":"<p>其中命令行<br></p><blockquote>nodemon --watch src/ -e js,coffee app.js</blockquote><p>等价于配置文件</p><pre><code>{\n  watch: ['src/'],\n  ignore: [],\n  script: 'app.js'\n  options: {\n    extensions: ['js', 'coffee'],\n    exec: 'node'\n  }\n}</code></pre><p>命令行</p><blockquote>nodemon</blockquote><p>其option 转化逻辑为\n<br>\n<br>读命令行参数---&gt;若无，查找本地local配置文件--&gt;若无，查找全局配置文件-&gt;若无，尝试package.json中的main和start--&gt;查找index.js\n<br>\n<br>因此 配置启动文件，可加快启动速度，避免深度查找</p><p>接下来，我们一一看下其配置选项，如下所示</p><blockquote>nodemon -h</blockquote><blockquote>--config 可设置指定配置文件<br>\n--ext 设置监听文件的后缀扩展名，如想要监听ts文件的变更，需设置-e ts<br>\n--exec 执行脚本<br>\n--watch 设置要监听的文件路径<br>\n--ignore 设置无需监听的文件路径</blockquote><p>不想在项目中单独维护nodemon.json配置文件，可在package.json中设置\n<br>package.json设置方法如下</p><pre><code>{\n  \"name\": \"nodemon\",\n  \"homepage\": \"http://nodemon.io\",\n  \"...\": \"... other standard package.json values\",\n  \"nodemonConfig\": {\n    \"ignore\": [\"test/*\", \"docs/*\"],\n    \"delay\": \"2500\"\n  }\n}</code></pre><p>需要注意的是，不能再通过--config 设置文件，且本地不能再保存nodemon.json文件，否则package.json中的配置将被忽略</p><p><br></p><p><br></p><p><br></p>"}}