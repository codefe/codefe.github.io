{"sta":1,"data":{"subTitle":"移动端1px问题的解决办法","content":"<h3><strong>原因</strong></h3><p></p><p>由于不同的手机有不同的像素密度导致的。如果移动显示屏的分辨率始终是普通屏幕的2倍，1px的边框在devicePixelRatio=2的移动显示屏下会显示成2px，所以在高清瓶下看着1px总是感觉变胖了</p><p><h3>解决方法</h3><h4>一．在ios8+中当devicePixelRatio=2的时候使用0.5px\n</h4></p><pre><code>p{\n    border:1px solid #000;\n}\n\n@media (-webkit-min-device-pixel-ratio: 2) {\n     p{\n         border:0.5px solid #000;\n     }\n}</code></pre><p><h4>二，伪类 + transform 实现</h4>对于老项目伪类+transform是比较完美的方法了。<br>原理是把原先元素的 border 去掉，然后利用 :before 或者 :after 重做 border ，并 transform 的 scale 缩小一半，原先的元素相对定位，新做的 border 绝对定位。<br>单条border样式设置：</p><pre><code>.scale-1px{ position: relative; border:none; }\n.scale-1px:after{\n    content: '';\n    position: absolute; bottom: 0;\n    background: #000;\n    width: 100%; height: 1px;\n    -webkit-transform: scaleY(0.5);\n    transform: scaleY(0.5);\n     -webkit-transform-origin: 0 0;\n    transform-origin: 0 0; \n}</code></pre><p>优点：所有场景都能满足，支持圆角(伪类和本体类都需要加border-radius)<br>缺点：对于已经使用伪类的元素(例如clearfix)，可能需要多层嵌套</p><p><br></p><p><h4>三，viewport + rem 实现</h4>这种兼容方案相对比较完美，适合新的项目，老的项目修改成本过大。<br>在devicePixelRatio = 2 时，输出viewport：<br>在devicePixelRatio = 3 时，输出viewport：<br>优点：所有场景都能满足，一套代码，可以兼容基本所有布局<br>缺点：老项目修改代价过大，只适用于新项目</p><p><br></p><p><h4>四，使用box-shadow模拟边框</h4>利用css 对阴影处理的方式实现0.5px的效果<br>样式设置：\n<br></p><pre><code>.box-shadow-1px {\n    box-shadow: inset 0px -1px 1px -1px #c8c7cc;\n}</code></pre><p>优点：代码量少，可以满足所有场景</p><p>缺点：边框有阴影，颜色变浅</p><p><br></p><p><br></p><p><br></p>"}}