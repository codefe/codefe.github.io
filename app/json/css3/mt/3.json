{"sta":1,"data":{"subTitle":"CSS3 动画卡顿性能优化解决方案","content":"<p>小程序，与vue类似，它们都有生命周期这回事。</p><p>1、onLoad 监听页面加载</p><p>2、onReady 监听页面初次渲染完成</p><p>3、onShow 监听页面显示</p><p>到底是什么意思？</p><p>所以这又触碰到了我的知识盲区，不过项目在磕磕绊绊中完成的差不多了，但是遇到了CSS3动画渲染的性能问题，所以我也是被逼的，再回过头来从浏览器渲染网页的流程出发，去找动画卡顿的症结。</p><p>浏览器渲染网页的流程如下：</p><p>1、使用 HTML 创建文档对象模型（DOM）</p><p>2、使用 CSS 创建 CSS 对象模型（CSSOM）</p><p>3、基于 DOM 和 CSSOM 执行脚本（Scripts）</p><p>4、合并 DOM 和 CSSOM 形成渲染树（Render Tree）</p><p>5、使用渲染树布局（Layout）所有元素</p><p>6、渲染（Paint）所有元素</p><p>可以结合Alon的这篇前端性能优化和安卓开发者选项的显示页面布局。</p><h4 id=\"%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91%E8%80%85%E9%80%89%E9%A1%B9%E7%9A%84%E6%98%BE%E7%A4%BA%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80\" name=\"%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91%E8%80%85%E9%80%89%E9%A1%B9%E7%9A%84%E6%98%BE%E7%A4%BA%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80\"><strong>安卓开发者选项的显示页面布局</strong></h4><p>如何判断手机app是native，webview还是hybird？</p><p></p><p>简单说下，app中的一大块是白色的没有红线标记出来的，但是上面有按钮，图片等时，就是webview，也就是通过一个伪浏览器去请求到的数据，断网时打开app没有任何东西显示在上面</p><p><img src=\"./app/json/css3/mt/img/1.jpeg\" style=\"max-width:100%;\" class=\"\"></p><p>onLoad 监听页面加载\n<br>\n<br>在渲染完界面之后，也就是通过.json中的配置项生成native界面后，开始渲染webview的部分，一个页面只会调用一次。\n<br>\n<br>onReady 监听页面初次渲染完成\n<br>\n<br>一个页面只会调用一次，代表页面已经准备妥当，可以和视图层进行交互。\n<br>\n<br>onShow 监听页面显示\n<br>\n<br>每次打开页面都会去调用其中的函数。\n<br>\n<br>我们的动画应该放在哪里？\n<br>应该放在onShow里，因为这样我每次打开都能看到动画。\n<br>\n<br>为什么会卡顿？\n<br>有一个前提必须要提，前端开发者们都知道，浏览器是单线程运行的。但是我们要明确以下几个概念：单线程，主线程和合成线程。\n<br>\n<br>虽然说浏览器执行js是单线程执行（注意，是执行，并不是说浏览器只有1个线程，而是运行时，runing），但实际上浏览器的2个重要的执行线程，这 2 个线程协同工作来渲染一个网页：主线程和合成线程。\n<br>\n<br>一般情况下，主线程负责：运行 JavaScript；计算 HTML 元素的 CSS 样式；页面的布局；将元素绘制到一个或多个位图中；将这些位图交给合成线程。\n<br>\n<br>相应地，合成线程负责：通过 GPU 将位图绘制到屏幕上；通知主线程更新页面中可见或即将变成可见的部分的位图；计算出页面中哪部分是可见的；计算出当你在滚动页面时哪部分是即将变成可见的；当你滚动页面时将相应位置的元素移动到可视区域。</p><p>那么为什么会造成动画卡顿呢？\n<br>原因就是主线程和合成线程的调度不合理。\n<br>\n<br>下面来详细说一下调度不合理的原因。</p><blockquote>在使用height，width，margin，padding作为transition的值时，会造成浏览器主线程的工作量较重，例如从margin-left：-20px渲染到margin-left:0，主线程需要计算样式margin-left:-19px,margin-left:-18px，一直到margin-left:0，而且每一次主线程计算样式后，合成进程都需要绘制到GPU然后再渲染到屏幕上，前后总共进行20次主线程渲染，20次合成线程渲染，20+20次，总计40次计算。</blockquote><p>主线程的渲染流程，可以参考浏览器渲染网页的流程：\n<br>\n<br>1、使用 HTML 创建文档对象模型（DOM）\n<br>\n<br>2、使用 CSS 创建 CSS 对象模型（CSSOM）\n<br>\n<br>3、基于 DOM 和 CSSOM 执行脚本（Scripts）\n<br>\n<br>4、合并 DOM 和 CSSOM 形成渲染树（Render Tree）\n<br>\n<br>5、使用渲染树布局（Layout）所有元素\n<br>\n<br>6、渲染（Paint）所有元素**\n<br>\n<br>也就是说，主线程每次都需要执行Scripts，Render Tree ,Layout和Paint这四个阶段的计算。</p><blockquote>而如果使用transform的话，例如tranform:translate(-20px,0)到transform:translate(0,0)，主线程只需要进行一次tranform:translate(-20px,0)到transform:translate(0,0)，然后合成线程去一次将-20px转换到0px，这样的话，总计1+20计算。</blockquote><p>可能会有人说，这才提升了19次，有什么好性能提升的？\n<br>\n<br>假设一次10ms。\n<br>\n<br>那么就减少了约190ms的耗时。\n<br>\n<br>会有人说，辣鸡，才190ms，无所谓。\n<br>\n<br>那么如果margin-left是从-200px到0呢，一次10ms，10ms*199≈2s。\n<br>\n<br>还会有人说，辣鸡，也就2s，无所谓。\n<br>\n<br>你忘了单线程这回事了吗？\n<br>\n<br>如果网页有3个动画，3*2s=6s，就是6s的性能提升。\n<br>\n<br>由于数据是猜测的，所以暂时不考虑其真实性，文章后面我使用chrome devtools的performance做了一个实验。\n<br>\n<br>要知道，在\"客户至上\"的今天，好的用户体验是所有产品的必须遵守的一条规则，无论是对于开发者还是产品经理，追求极致的性能都是我们打造一个好的产品所必备的品质。\n<br>\n<br>可能看了我的略不专业的分析后，大家对主线程，合成线程以及它们在2种性能不同动画方案上的工作流程还不是很了解，可以去看一篇翻译过来的博客（英文原版链接已经失效了）：深入浏览器理解CSS animations 和 transitions的性能问题\n<br>\n<br>这篇文章完美讲述了浏览器主线程和合成线程的区别，并且举了一个高度从100px变化到200px的2种动画方案的对比，对主线程和合成线程的整个工作流程做了很详尽的讲解，真心建议认真阅读一遍。\n<br>\n<br>回过头来总结下，css3动画卡顿的解决方案：</p><p>在使用css3 transtion做动画效果时，优先选择transform，尽量不要使用height，width，margin和padding。\n<br>\n<br>transform为我们提供了丰富的api，例如scale，translate，rotate等等，但是在使用时需要考虑兼容性。但其实对于大多数css3来说，mobile端支持性较好，desktop端支持性需要格外注意。\n<br>\n<br>补充：为了增强本文的说服力，特地回家做了一个实验，代码如下。</p><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\" /&gt;\n  &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n  &lt;title&gt;Page Title&lt;/title&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n  &lt;style&gt;\n    .margin-transition{\n      /* margin-left: 0; */\n      background: rgba(0,0,255,0.3);\n      transition: margin-left 1s;\n    }\n    .transform-transition{\n      /* transform: translate(0,0); */\n      background: rgba(0,255,0,0.3);\n      transition: transform 1s;\n    }\n    .common{\n      height: 300px;\n      width: 300px;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div class=\"margin-transition common\" id=\"marginTransition\"&gt;\n    &lt;p&gt;transition:margin-left 1s&lt;/p&gt;\n  &lt;/div&gt;\n  &lt;div class=\"transform-transition common\" id=\"transformTransition\"&gt;\n      &lt;p&gt;transition:tranform 1s&lt;/p&gt;\n  &lt;/div&gt;\n  &lt;button id=\"control\"&gt;见证奇迹&lt;/button&gt;\n  &lt;script&gt;\n      var btn = document.getElementById('control');\n      var marginTransition = document.getElementById('marginTransition');\n      var transformTransition = document.getElementById('transformTransition');\n      btn.addEventListener(\"click\",function(){\n        console.log(marginTransition.style,transformTransition.style)\n        marginTransition.style.marginLeft = \"500px\";\n        transformTransition.style.transform = \"translate(500px,0)\"\n      })\n  &lt;/script&gt;  \n&lt;/body&gt;\n&lt;/html&gt;</code></pre><p>我将主要借助chrome devtools的performance工具对比二者的性能差异。<br>先来看margin动画，动态修改DOM节点的margin-left值从0到500px;。<br><blockquote>transition: margin-left 1s;</blockquote></p><p><img src=\"./app/json/css3/mt/img/2.gif\" style=\"max-width:100%;\" class=\"\"></p><p>再来看下transform动画，动态修改DOM节点的transform值从translate(0,0)到translate(500px,0)。<br><blockquote>transition: transform 1s;</blockquote></p><p><img src=\"./app/json/css3/mt/img/3.gif\" style=\"max-width:100%;\" class=\"\"></p><p><img src=\"./app/json/css3/mt/img/4.png\" style=\"max-width:100%;\" class=\"\"><img src=\"./app/json/css3/mt/img/5.png\" style=\"max-width:100%;\"></p><p>可能图片不是很好地能说明性能差异，那么我们来列一张耗时对比表，方便我们计算。\n<br>\n<br><h3>耗时\n</h3>\n<br>margin\n<br>\n<br>transform\n<br>\n<br>Summery\n<br>\n<br>3518ms\n<br>\n<br>2286ms\n<br>\n<br>Scripting\n<br>\n<br>1.8ms\n<br>\n<br>2.9ms\n<br>\n<br>Rendering\n<br>\n<br>22.5ms\n<br>\n<br>6.9ms\n<br>\n<br>Painting\n<br>\n<br>9.7ms\n<br>\n<br>1.6ms\n<br>\n<br>Other\n<br>\n<br>39.3ms\n<br>\n<br>25.2ms\n<br>\n<br>Idle( browser is waiting on the CPU or GPU to do some processing)\n<br>\n<br>3444.4ms\n<br>\n<br>2249.8ms\n<br>\n<br><h3>GPU使用率\n</h3>\n<br>4.1MB\n<br>\n<br>1.7MB\n<br>\n<br>通过上表我们可以计算出明margin，transform与transition组合实现CSS3动画效果时的性能差异参数。\n<br>\n<br>关键性能参数\n<br>\n<br>margin\n<br>\n<br>transform\n<br>\n<br><h3>实际动画耗时（总时间 减去 空闲时间）\n</h3>\n<br>73.6ms\n<br>\n<br>36.2ms\n<br>\n<br>计算得出，transform动画耗时约等于margin动画耗时的0.49倍，性能优化50%。\n<br>\n<br>由于我对Other的所做的具体事情不是很清楚，所以这里的实际动画时间也有可能还要减掉Other中的时间，下表是我们减掉后的数据。\n<br>\n<br>关键性能参数\n<br>\n<br>margin\n<br>\n<br>transform\n<br>\n<br><h3>实际动画耗时（总时间 减去 其他时间和空闲时间）\n</h3>\n<br>34.3ms\n<br>\n<br>11ms\n<br>\n<br>计算得出，transform动画耗时约等于margin动画耗时的0.32倍，性能优化接近70%。\n<br>\n<br>也就是说，无论我们减去还是不减去Other的时间，我们采用transform实现动画的方式都比margin动画快。\n<br>\n<br>不精确的得出一个小结论：transform比margin性能好50%~70%。\n<br>\n<br>虽然会有50%~70%的性能提升，但是需要注意硬件差异，硬件好的情况下可能不能发现卡顿或者其他的一些性能上的问题。\n<br>\n<br>例如在开发小程序的过程中，模拟器是位于desktop端的，因此它的硬件性能性能更好，例如CPU，GPU。但是一旦在mobile端运行，例如ios或者android上运行时，就可能会出现性能问题，这就是因为移动端的硬件条件逊于PC端导致的。\n<br>\n<br>所以说，性能问题是一直存在的，只不过硬件差异会导致性能影响的程度不同。\n<br>\n<br>所以我们再次回过头来，总结出css3动画卡顿的解决方案：\n<br>\n<br>在使用css3 transtion做动画效果时，优先选择transform，尽量不要使用height，width，margin和padding。\n<br>\n<br>That's it !</p><p>参考\n<br>1、http://sy-tang.github.io/2014/05/14/CSS+animations+and+transitions+performance-+looking+inside+the+browser/\n<br>\n<br>2、http://jinlong.github.io/2017/05/08/optimising-the-front-end-for-the-browser/\n<br>\n<br>3、http://blog.csdn.net/yeana1/article/details/52756871\n<br>\n<br>4、https://www.jianshu.com/p/b70b72de3c32\n<br>\n<br>5、https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/\n<br>\n<br>6、http://blogs.adobe.com/webplatform/2014/03/18/css-animations-and-transitions-performance/</p><p><br></p><p><br></p><p><br></p><p><br></p>"}}