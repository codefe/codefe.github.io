{"sta":1,"data":{"subTitle":"CSS3动画之逐帧动画","content":"<p>CSS3 实际上是使用 animation-timing-function 的阶梯函数 steps(number_of_steps, direction) 来实现逐帧动画的连续播放的。&nbsp;</p><p>&nbsp;在移动端，CSS3 Animation 兼容性良好，相对于 JS，CSS3 逐帧动画使用简单，且效率更高，因为许多优化都在浏览器底层完成。\n\n因此在触屏页面中 CSS3 逐帧动画使用广泛，下文将对其进行详细介绍。</p><p><h3>（1）将动画帧合并为雪碧图\n</h3>在触屏页面中，动画往往承担页面样式实现的角色（即不需要替换），因此我们会将图片放到元素的背景中（background-image）。\n<br>\n<br>逐帧动画有不同的动画帧，我们可以通过更改 background-image 的值实现帧的切换，但多张图片会带来多个 HTTP 请求，且不利于文件的管理。\n<br>\n<br>比较合适的做法，是将所有的动画帧合并成一张雪碧图（sprite），通过改变 background-position 的值来实现动画帧切换。因此，逐帧动画也被称为“精灵动画（sprite animation）”。</p><p>以京东到家的触屏页面 《年货送到家》 为例：\n<br>\n<br>这个动画一个有三帧，将3个动画帧合并，并放到 .p8 .page_key 的背景中：</p><p><img src=\"./app/json/css3/animation/img/0.png\" style=\"max-width:100%;\"></p><pre><code>.p8 .page_key {\n    position: absolute;\n    width: 572px;\n    height: 586px;\n    background-image: url(\"../img/p8.png\");\n}</code></pre><p><br></p><p><h3>（2）使用 steps 实现动画播放\n</h3>steps 指定了一个阶梯函数，包含两个参数：\n<br>\n<br>第一个参数指定了函数中的间隔数量（必须是正整数）；\n<br>第二个参数可选，指定在每个间隔的起点或是终点发生阶跃变化，接受 start 和 end 两个值，默认为 end。</p><p>通过 W3C 中的这张图片来理解 steps 的工作机制：</p><p><img src=\"./app/json/css3/animation/img/1.png\" style=\"max-width:100%;\" class=\"\"></p><p>回到上述的例子，我们在 keyframes 中定义好每个动画帧：</p><pre><code>@-webkit-keyframes p8{\n    0%{background-position: 0 0;}\n    33.33%{background-position: 0 -586px;}\n    66.66%{background-position: 0 -1172px;}\n    100%{background-position: 0 -1758px;}\n}</code></pre><p>然后，给他加上 animation：</p><pre><code>.p8 .page_key{\n    -webkit-animation: p8 steps(1,end) 1.5s infinite;\n}</code></pre><p><h4>为什么第一个参数是1？</h4>前文中提到，steps 是 animation-timing-function 的一个属性值，也就是说，animation-timing-function 应该于两个 keyframes 之间，而非整个动画。在上面的 keyframes 中，我们已经把每个帧都写出来了，所以两个 keyframes 之间的间隔是1。\n<br>\n<br>更加简便的写法？\n<br>\n<br>既然说 steps 第一个参数是指函数的间隔数量，那么我们就可以把 keyframes 的计算直接交给 steps 来完成。</p><pre><code>.p8 .page_key{\n    -webkit-animation: p8 steps(3,end) 1.5s infinite;\n}\n@-webkit-keyframes p8 {\n    100% {background-position: 0 -1758px;}\n}</code></pre><p>以上两种写法效果是等同的。</p><h3>CSS3 逐帧动画使用技巧</h3><p>（1）step-start 与 step-end\n<br>除了 steps 函数，animation-timing-function 还有两个与逐帧动画相关的属性值 step-start 与 step-end：\n<br>\n<br>step-start 等同于 steps(1,start)：动画执行时以开始端点为开始；\n<br>step-end 等同于 steps(1,end)：动画执行时以结尾端点为开始。\n<br>（2）动画帧的计算：</p><pre><code>$spriteWidth: 140px; // 精灵宽度 \n@keyframes ani {\n  100% {\n    background-position: -($spriteWidth * 12) 0; // 12帧\n  }\n}</code></pre><p>（3）适配方案：rem+scale<br></p><p>我们知道，rem 的计算会存在误差，因此使用雪碧图时我们并不推荐用 rem。如果是逐帧动画的话，由于计算的误差，会出现抖动的情况。\n<br>\n<br>那么在触屏页中，如何实现页面的适配？\n<br>\n<br>这里提供一个思路：<br></p><p>非逐帧动画部分，使用 rem 做单位；\n<br>逐帧动画部分，使用 px 做单位，再结合 js 对动画部分使用 scale 进行缩放。</p><p><br></p><p><br></p>"}}