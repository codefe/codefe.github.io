{"sta":1,"data":{"subTitle":"滚动视差","content":"<h3><strong>何为滚动视差</strong></h3><p></p><p>视差滚动（Parallax Scrolling）是指让多层背景以不同的速度移动，形成立体的运动效果，带来非常出色的视觉体验。 作为网页设计的热点趋势，越来越多的网站应用了这项技术。</p><p><img src=\"./app/json/css3/case/img/1.gif\" style=\"max-width:100%;\" class=\"\"></p><p>通常而言，滚动视差在前端需要辅助 Javascript 才能实现。当然，其实 CSS 在实现滚动视差效果方面，也有着不俗的能力。下面就让我们来见识一二：\n<br>\n<br><h4>认识 background-attachment\n</h4>\n<br>background-attachment 算是一个比较生僻的属性，基本上平时写业务样式都用不到这个属性。但是它本身很有意思。\n<br>\n<br>background-attachment：如果指定了 background-image ，那么 background-attachment 决定背景是在视口中固定的还是随着包含它的区块滚动的。\n<br>\n<br>单单从定义上有点难以理解，随下面几个 Demo 了解下 background-attachment 到底是什么意思：\n<br>\n<br><h4>background-attachment: scroll\n</h4>\n<br>scroll 此关键字表示背景相对于元素本身固定， 而不是随着它的内容滚动。\n<br>\n<br><h4>background-attachment: local\n</h4>\n<br>local 此关键字表示背景相对于元素的内容固定。如果一个元素拥有滚动机制，背景将会随着元素的内容滚动， 并且背景的绘制区域和定位区域是相对于可滚动的区域而不是包含他们的边框。\n<br>\n<br><h4>background-attachment: fixed\n</h4>\n<br>fixed 此关键字表示背景相对于视口固定。即使一个元素拥有滚动机制，背景也不会随着元素的内容滚动。\n<br>\n<br>注意一下 scroll 与 fixed，一个是相对元素本身固定，一个是相对视口固定，有点类似 position 定位的 absolute 和 fixed。\n<br>\n<br>可以感受下 3 种不同取值的不同效果：\n<br>\n<br>CodePen Demo — bg-attachment Demo（<a href=\"https://codepen.io/Chokcoco/pen/xJJorg\" target=\"_blank\">https://codepen.io/Chokcoco/pen/xJJorg</a>）</p><p>\n<br><h3>使用 background-attachment: fixed 实现滚动视差\n</h3>\n<br>首先，我们使用 background-attachment: fixed 来实现滚动视差。fixed 此关键字表示背景相对于视口固定。即使一个元素拥有滚动机制，背景也不会随着元素的内容滚动。\n<br>\n<br>这里的关键在于，即使一个元素拥有滚动机制，背景也不会随着元素的内容滚动。也就是说，背景图从一开始就已经被固定死在初始所在的位置。\n<br>\n<br>我们使用，图文混合排布的方式，实现滚动视差，HTML 结构如下，.g-word 表示内容结构，.g-img 表示背景图片结构：</p><pre><code>&lt;section class=\"g-word\"&gt;Header&lt;/section&gt;\n&lt;section class=\"g-img\"&gt;IMG1&lt;/section&gt;\n&lt;section class=\"g-word\"&gt;Content1&lt;/section&gt;\n&lt;section class=\"g-img\"&gt;IMG2&lt;/section&gt;\n&lt;section class=\"g-word\"&gt;Content2&lt;/section&gt;\n&lt;section class=\"g-img\"&gt;IMG3&lt;/section&gt;\n&lt;section class=\"g-word\"&gt;Footer&lt;/section&gt;</code></pre><p>关键 CSS：</p><pre><code>section {\n    height: 100vh;\n}\n\n.g-img {\n    background-image: url(...);\n    background-attachment: fixed;\n    background-size: cover;\n    background-position: center center;\n}</code></pre><p>效果如下：</p><p><img src=\"./app/json/css3/case/img/2.gif\" style=\"max-width:100%;\" class=\"\"></p><p>CodePen Demo —&nbsp;<a href=\"https://codepen.io/Chokcoco/pen/JBaQoY\" target=\"_blank\">https://codepen.io/Chokcoco/pen/JBaQoY</a><br>\n<br>嗯？有点神奇，为什么会是这样呢？可能很多人会和我一样，第一次接触这个属性对这样的效果感到懵逼。\n<br>\n<br>我们把上面 background-attachment: fixed 注释掉，或者改为 background-attachment: local，再看看效果：</p><p><img src=\"./app/json/css3/case/img/3.gif\" style=\"max-width:100%;\" class=\"\"></p><p>CodePen Demo —&nbsp;<a href=\"https://codepen.io/Chokcoco/pen/ZjMdJz\" target=\"_blank\">https://codepen.io/Chokcoco/pen/ZjMdJz</a><br>\n<br>这次，图片正常跟随滚动条滚动了，按常理，这种效果才符合我们大脑的思维。\n<br>\n<br>而滚动视差效果，正是不按常理出牌的一个效果，重点来了：\n<br>\n<br>当页面滚动到图片应该出现的位置，被设置了 background-attachment: fixed 的图片并不会继续跟随页面的滚动而跟随上下移动，而是相对于视口固定死了。\n<br>\n<br>好，我们再来试一下，如果把所有 .g-word 内容区块都去掉，只剩下全部设置了 background-attachment: fixed 的背景图区块，会是怎么样呢？\n<br>\n<br>HTML 代码如下：</p><pre><code>&lt;section class=\"g-img\"&gt;IMG1&lt;/section&gt;\n&lt;section class=\"g-img\"&gt;IMG2&lt;/section&gt;\n&lt;section class=\"g-img\"&gt;IMG3&lt;/section&gt;</code></pre><pre><code>section {\n    height: 100vh;\n}\n\n.g-img {\n    background-image: url(...);\n    background-attachment: fixed;\n    background-size: cover;\n    background-position: center center;\n}</code></pre><p>效果如下：</p><p><img src=\"./app/json/css3/case/img/4.gif\" style=\"max-width:100%;\" class=\"\"></p><p>CodePen Demo（<a href=\"https://codepen.io/Chokcoco/pen/oMPrGZ\" target=\"_blank\">https://codepen.io/Chokcoco/pen/oMPrGZ</a>）</p><p>\n<br>结合这张 GIF，相信能对 background-attachment: fixed 有个更深刻的认识，移动的只有视口，而背景图是一直固定死的。\n<br>\n<br>综上，就是 CSS 使用 background-attachment: fixed 实现滚动视差的一种方式，也是相对而言比较容易的一种。当然，background-attachment: fixed 本身的效果并不仅只是能有用来实现滚动视差效果，合理运用，还可以实现其他很多有趣的效果，这里简单再列一个：\n<br>\n<br>background-attachment: fixed 实现图片点击水纹效果\n<br>\n<br>利用图片相对视口固定，可以有很多有趣的效果，譬如下面这个，来源于这篇文章CSS Water Wave (水波效果)：</p><p><img src=\"./app/json/css3/case/img/5.gif\" style=\"max-width:100%;\" class=\"\"></p><p>CodePen Demo — bg-attachment:fixed Wave（<a href=\"https://codepen.io/Chokcoco/pen/wxYZWO\" target=\"_blank\">https://codepen.io/Chokcoco/pen/wxYZWO</a>）</p><p>\n<br>利用图片相对视口固定的特性实现点击的水纹效果。\n<br>\n<br>上面这个效果有点瑕疵，图片在放大容器变大的过程中发生了明显的抖动。当然，效果还是可以的，background-attachment 还有很多有意思的效果可以挖掘。\n<br>\n<br>使用 transform: translate3d 实现滚动视差\n<br>\n<br>言归正传，下面介绍另外一种使用 CSS 实现的滚动视差效果，利用的是 CSS 3D。\n<br>\n<br>原理就是：\n<br>\n<br>我们给容器设置上 transform-style: preserve-3d 和 perspective: xpx，那么处于这个容器的子元素就将位于3D空间中，\n<br>\n<br>再给子元素设置不同的 transform: translateZ()，这个时候，不同元素在 3D Z轴方向距离屏幕（我们的眼睛）的距离也就不一样\n<br>\n<br>滚动滚动条，由于子元素设置了不同的 transform: translateZ()，那么他们滚动的上下距离 translateY 相对屏幕（我们的眼睛），也是不一样的，这就达到了滚动视差的效果。\n<br>\n<br>关于 transform-style: preserve-3d 以及 perspective 本文不做过多篇幅展开，默认读者都有所了解，还不是特别清楚的，可以先了解下 CSS 3D。\n<br>\n<br>核心代码表示就是：</p><pre><code>&lt;div class=\"g-container\"&gt;\n    &lt;div class=\"section-one\"&gt;translateZ(-1)&lt;/div&gt;\n    &lt;div class=\"section-two\"&gt;translateZ(-2)&lt;/div&gt;\n    &lt;div class=\"section-three\"&gt;translateZ(-3)&lt;/div&gt;\n&lt;/div&gt;</code></pre><pre><code>html {\n    height: 100%;\n    overflow: hidden;\n}\n\nbody {\n    perspective: 1px;\n    transform-style: preserve-3d;\n    height: 100%;\n    overflow-y: scroll;\n    overflow-x: hidden;\n}\n\n.g-container {\n    height: 150%;\n\n    .section-one {\n        transform: translateZ(-1px);\n    }\n    .section-two {\n        transform: translateZ(-2px);\n    }\n    .section-three {\n        transform: translateZ(-3px);\n    }\n}</code></pre><p>总结就是父元素设置 transform-style: preserve-3d 和 perspective: 1px，子元素设置不同的 transform: translateZ，滚动滚动条，效果如下：<br></p><p><img src=\"./app/json/css3/case/img/6.gif\" style=\"max-width:100%;\" class=\"\"></p><p>CodePen Demo — CSS 3D parallax（<a href=\"https://codepen.io/Chokcoco/pen/EpOeRm\" target=\"_blank\">https://codepen.io/Chokcoco/pen/EpOeRm</a>）</p><p>\n<br>很明显，当滚动滚动条时，不同子元素的位移程度从视觉上看是不一样的，也就达到了所谓的滚动视差效果。\n<br>\n<br>滚动视差文字阴影/虚影效果\n<br>\n<br>那么，运用 translate3d 的视差效果，又能有一些什么好玩的效果呢？下面这个滚动视差文字阴影/虚影效果很有意思：</p><p><img src=\"./app/json/css3/case/img/7.gif\" style=\"max-width:100%;\" class=\"\"></p><p>CodePen Demo — CSS translate3d Parallax（<a href=\"https://codepen.io/Chokcoco/pen/XBgBBp\" target=\"_blank\">https://codepen.io/Chokcoco/pen/XBgBBp</a>）</p><p>\n<br>当然，通过调整参数（perspective: ?px 以及 transform: translateZ(-?px);），还能有其他很有意思的效果出现：</p><p><img src=\"./app/json/css3/case/img/8.gif\" style=\"max-width:100%;\"></p><p>CodePen Demo — CSS translate3d Parallax 2（<a href=\"https://codepen.io/Chokcoco/pen/PBXwdX\" target=\"_blank\">https://codepen.io/Chokcoco/pen/PBXwdX</a>）</p><p>\n<br>是不是很有电影开片的厂商 LOGO 的特效的感觉 joy 。</p><p><br></p><p><br></p><p><br></p><p><br></p>"}}