{"sta":1,"data":{"subTitle":"使用 camera 拍摄照片及预览","content":"<h3>一、camera 插件</h3><p>camera 是 Flutter 提供的相机相关的插件，内部封装了相机相关的 Native API，通过 camera 插件能够获取当前设备相机列表，并且选择一个可用相机展示相机预览、拍照和录制视频等\n<br>\n<br>要使用 camera 插件，添加依赖，一般我们还需要 path_provider 和 path 两个包，用于存储和获取照片&nbsp;<br></p><pre>dependencies:\n  flutter:\n    sdk: flutter\n  camera:\n  path_provider:\n  path:</pre><p><h3>二、availableCameras 获取设备可用的相机列表\n</h3>availableCameras 是 camera.dart 提供的用于获取设备上相机列表的方法<br>Native 会将设备相机列表通过通信传递给 Flutter，然后再返回一个 List</p><pre>return cameras.map((Map&lt;dynamic, dynamic&gt; camera) {\n      return CameraDescription(\n        name: camera['name'],\n        lensDirection: _parseCameraLensDirection(camera['lensFacing']),\n        sensorOrientation: camera['sensorOrientation'],\n      );\n    }).toList();</pre><p>方法都是异步的，因此获取设备的一个主摄像头（一般是后置）可以通过如下方式：</p><pre>// Obtain a list of the available cameras on the device.\nfinal cameras = await availableCameras();\n\n// Get a specific camera from the list of available cameras.\nfinal firstCamera = cameras.first;</pre><p>当然，你可以通过判断相机列表来判断是否有可用相机，然后做一个提示</p><pre>final cameras = await availableCameras();\n  Widget _body;\n  if (cameras.length &gt; 0) {\n    _body = HomeContent(camera: cameras[0]);\n  } else {\n    _body = Center(child: Text('No Cameras'));\n  }</pre><p><h3>三、创建 CameraController 及初始化\n</h3>拿到设备相机之后，就可以创建 CameraController:</p><pre>_cameraController = CameraController(widget.camera, ResolutionPreset.medium);</pre><p>CameraController 需要传入两个顺序参数，分别是描述和预设分辨率</p><pre>CameraController(\n    this.description,\n    this.resolutionPreset, {\n    this.enableAudio = true,\n  })</pre><p>description 需要是 CameraDescription 类型<br>ResolutionPreset 有三个预设值分别是 low/medium/high<br>拿到 Controller 之后，就可以初始化设备上的相机，提供了 initialize() 方法</p><pre>_initializeControllerFuture = _cameraController.initialize();</pre><p>当然在 Widget 销毁的时候，需要将 CameraController 移除：</p><pre>@override\n  void dispose() {\n    _cameraController.dispose();\n    super.dispose();\n  }</pre><p><h3>四、使用 CameraPreview 预览相机\n</h3>拍照一般我们都会有一个预览窗口，预览窗口能够实时看到相机看到的内容<br>CameraPreview 使用很简单，只需要将 CameraController 的实例作为参数区实例化出 CameraPreview 即可。<br>CameraPreview 的宽度高度则是依赖父容器，一般用一个 Container：</p><pre>return Container(\n  child: CameraPreview(_cameraController),\n  width: 400,\n  height: 300,\n);</pre><p>当然，我们可以发现，CameraContoller.initialize() 方法也是异步的，如果需要等待异步完成在渲染页面，就需要使用 FutureBuilder 去渲染 Widget。<br>下面代码中，当 _initializeControllerFuture 完成的时候，才将 CameraPreview 渲染：</p><pre>FutureBuilder&lt;void&gt;(\n  future: _initializeControllerFuture,\n  builder: (context, snapshot) {\n    if (snapshot.connectionState == ConnectionState.done) {\n      // If the Future is complete, display the preview.\n      return Container(\n        child: CameraPreview(_cameraController),\n        width: 400,\n        height: 300,\n      );\n    } else {\n      // Otherwise, display a loading indicator.\n      return Center(child: CircularProgressIndicator());\n    }\n  },</pre><p><h3>五、使用 takePicture 拍照\n</h3>CameraController 提供了 takePicture 进行拍照， Future&lt;void&gt; takePicture(String path) async {}<br>拍照的时候需要将 path 也就是保存的路径传入<br>生成路径一般我们需要选择一个存储的文件夹，通过 path_provider 提供，通过 path 将路径组装起来<br>下面代码中，通过时间戳生成一个 path，然后再拼接整个路径：</p><pre>try {\n  await _initializeControllerFuture;\n  final dateTime = DateTime.now();\n  final path = join((await getTemporaryDirectory()).path,\n      '${dateTime.millisecondsSinceEpoch}.png');\n  await _cameraController.takePicture(path);\n\n  Navigator.of(context).push(MaterialPageRoute(\n    builder: (context) =&gt; DisplayPictureScreen(imagePath: path),\n  ));\n  Scaffold.of(context).showSnackBar(SnackBar(content: Text(path)));\n} catch (err, stack) {\n  print(err);\n}</pre><p>注意：上面代码中，await _initializeControllerFuture; 确保已经初始化过了 CameraController<br>通过 SnackBar 显示路径</p>"}}