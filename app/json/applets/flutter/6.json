{"sta":1,"data":{"subTitle":"Flutter 中使用 websocket","content":"<h3>一、 Flutter 中的 Websocket</h3><p>Flutter 提供了 web_socket_channel 这个包来处理 WebSocket 消息监听和发送<br>使用 web_socket_channel 引入如下包即可：<br><blockquote>import 'package:web_socket_channel/io.dart';\n</blockquote>创建 WebScoketChannel 实例可以使用上面包提供的 IOWebSocketChannel.connect 连接到一个 websocket 服务<br><blockquote>  IOWebSocketChannel _channel = IOWebSocketChannel.connect(\"ws://echo.websocket.org\");\n</blockquote>connect() 方法接收 url 作为参数，除此之外还支持传入 protocal 和 header 等</p><pre>factory IOWebSocketChannel.connect(url,\n      {Iterable&lt;String&gt; protocols,\n      Map&lt;String, dynamic&gt; headers,\n      Duration pingInterval})</pre><p><h3>二、数据监听和数据发送\n</h3><h4>1、监听\n</h4>监听 websocket 服务的消息基于 Stream.listen 方法</p><pre>StreamSubscription&lt;T&gt; listen(void onData(T event),\n      {Function onError, void onDone(), bool cancelOnError});</pre><p>上面创建好的 _channel 可以监听服务端发送过来的 message</p><pre>// 监听消息\n    _channel.stream.listen((message) {\n      print(message);\n    });</pre><p><h4>2、发送\n</h4>websocket 本身就是双向通信的，如果要发送给服务端，借助的则是 WebSocketSink.add 的能力</p><pre>void add(T data) {\n    _sink.add(data);\n  }</pre><p>因此使用上面的 _channel 发送数据可以如下：</p><pre>void _sendHandle() {\n    if (_message.isNotEmpty) {\n      _channel.sink.add(_message);\n    }\n  }</pre><p><h4>3、关闭链接\n</h4>Widget 生命周期中，需要将 socketChannel 关闭，通过 WebSocketSink.close()<br><blockquote> _channel.sink.close();\n</blockquote><h3>三、websocket 实践\n</h3><blockquote>statefulWidget 通过一个 list 存储数据<br>\n连接 websocket ，这里使用 ws://echo.websocket.org<br>\n监听数据传入<br>\n通过 文本框 向 服务端推送数据</blockquote></p><pre>class WebSocketDemo extends StatefulWidget {\n  WebSocketDemo({Key key}) : super(key: key);\n\n  _WebSocketDemoState createState() =&gt; _WebSocketDemoState();\n}\n\nclass _WebSocketDemoState extends State&lt;WebSocketDemo&gt; {\n  List _list = new List();\n  String _message;\n  IOWebSocketChannel _channel =\n  IOWebSocketChannel.connect(\"ws://echo.websocket.org\");\n\n  void _onChangedHandle(value) {\n    setState(() {\n      _message = value.toString();\n    });\n  }\n\n  _WebSocketDemoState() {\n    print(_channel);\n  }\n  @override\n  void initState() {\n    super.initState();\n    setState(() {\n      _list.add('[Info] Connected Successed!');\n    });\n\n    // 监听消息\n    _channel.stream.listen((message) {\n      print(message);\n      setState(() {\n        _list.add('[Received] ${message.toString()}');\n      });\n    });\n  }\n\n  void _sendHandle() {\n    if (_message.isNotEmpty) {\n      _list.add('[Sended] $_message');\n      _channel.sink.add(_message);\n    }\n  }\n\n  Widget _generatorForm() {\n    return Column(\n      children: &lt;Widget&gt;[\n        TextField(onChanged: _onChangedHandle),\n        SizedBox(height: 10),\n        Row(\n          mainAxisAlignment: MainAxisAlignment.spaceAround,\n          children: &lt;Widget&gt;[\n            RaisedButton(\n              child: Text('Send'),\n              onPressed: _sendHandle,\n            )\n          ],\n        )\n      ],\n    );\n  }\n\n  List&lt;Widget&gt; _generatorList() {\n    List&lt;Widget&gt; tmpList = _list.map((item) =&gt; ListItem(msg: item)).toList();\n    List&lt;Widget&gt; prefix = [_generatorForm()];\n    prefix.addAll(tmpList);\n    return prefix;\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return ListView(\n      padding: EdgeInsets.all(10),\n      children: _generatorList(),\n    );\n  }\n\n  @override\n  void dispose() {\n    super.dispose();\n    _channel.sink.close();\n  }\n}\n\nclass ListItem extends StatelessWidget {\n  final String msg;\n  ListItem({Key key, this.msg}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return Text(msg);\n  }\n}</pre><p><br></p><p><br></p>"}}