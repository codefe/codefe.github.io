{"sta":1,"data":{"subTitle":"构建用户选项页面","content":"<h3>一、描述</h3><p>扩展程序允许用户通过提供的 options 页面来自定义扩展程序的行为。用户可以通过右键单击工具栏中的扩展程序图标，然后选择选项或导航至 chrome://extensions 的扩展程序管理页面查看扩展程序的选项，找到管理控制页面。\n<br>\n<img src=\"/app/json/applets/chrome/imgs/22.jpg\" style=\"max-width:100%;\">\n<br><h3>二、开发用户选项页面\n</h3>比如下一个很简单的用户选项页面：</p><pre>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;&lt;title&gt;My Test Extension Options&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n\nFavorite color:\n&lt;select id=\"color\"&gt;\n &lt;option value=\"red\"&gt;red&lt;/option&gt;\n &lt;option value=\"green\"&gt;green&lt;/option&gt;\n &lt;option value=\"blue\"&gt;blue&lt;/option&gt;\n &lt;option value=\"yellow\"&gt;yellow&lt;/option&gt;\n&lt;/select&gt;\n\n&lt;label&gt;\n  &lt;input type=\"checkbox\" id=\"like\"&gt;\n  I like colors.\n&lt;/label&gt;\n\n&lt;div id=\"status\"&gt;&lt;/div&gt;\n&lt;button id=\"save\"&gt;Save&lt;/button&gt;\n\n&lt;script src=\"options.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre><p>使用 storage.sync API在设备之间保存用户的首选选项。<br>基本的逻辑处理：</p><pre>// 通过 chrome.storage 保存\nfunction saveOptions() {\n    const color = document.getElementById('color').value;\n    const likesColor = document.getElementById('like').value;\n    chrome.storage.sync.set({\n        favoriteColor: color,\n        likesColor: likesColor,\n    }, () =&gt; {\n        // 更新状态文本\n        const status = document.getElementById('status');\n        status.textContent = 'options saved';\n        // 隐藏状态文本\n        setTimeout(() =&gt; {\n            status.textContent = '';\n        }, 500);\n    })\n}\n\n// 重置所有的表单状态\nfunction restoreOptions() {\n    // 默认是 color = 'red' 并且 likesColor = 'true'\n    chrome.storage.sync.get({\n        favoriteColor: 'red',\n        likesColor: true\n    }, () =&gt; {\n        document.getElementById('color').value = items.favoriteColor;\n        document.getElementById('like').checked = items.likesColor;\n    });\n    document.addEventListener('DOMContentLoaded', restore_options);\n    document.getElementById('save').addEventListener('click', save_options);\n}</pre><p><h3>三、声明用户选项\n</h3>有两种可用类型的扩展选项页面，整页和嵌入式。选项的类型取决于它在清单中的声明方式。\n<br>\n<br><h4>1、整页面用户选项\n</h4>扩展程序的选项页面将显示在新选项卡中。选项 HTML 文件在 options_page字段下配置：\n<br>\n</p><pre>{\n  \"name\": \"My extension\",\n  ...\n  \"options_page\": \"options.html\",\n  ...\n}</pre><p><h4>2、嵌入式的用户选项\n</h4>嵌入式选项允许用户调整扩展选项，而无需离开嵌入式框内的扩展管理页面。要声明嵌入选项，扩展程序 manifest 中的 options_ui 字段下注册 HTML 文件，并将 open_in_tab 键设置为 false。&nbsp;<br></p><pre>{\n  \"name\": \"My extension\",\n  ...\n  \"options_ui\": {\n    \"page\": \"options.html\",\n    \"open_in_tab\": false\n  },\n  ...\n}</pre><p>这个时候如果点击了用户控制选项，会以 modal 的形式弹出：</p><p><img src=\"/app/json/applets/chrome/imgs/23.jpg\" style=\"max-width:100%;\"></p><p>options_ui 的两个字段的意思是：<br><blockquote>page：选项页面的代码地址<br>\nopen_in_tab: 如果设置成 true，会在新的 tab 中打开，而不会在当前管理页面打开。\n</blockquote><h3>四、考虑不同\n</h3>嵌入在 chrome：//extensions 中的选项页面有一些与不在自己的选项卡中托管的选项页有一些行为差异。\n<br>\n<br><h4>1、链接到选项页面\n</h4>扩展可以通过调用 chrome.runtime.openOptionsPage 直接链接到选项页面。<br>比如 html 代码：</p><pre>&lt;button id=\"go-to-options\"&gt;Go to options&lt;/button&gt;</pre><p>js 代码</p><pre>document.querySelector('#go-to-options').addEventListener(function() {\n  if (chrome.runtime.openOptionsPage) {\n    chrome.runtime.openOptionsPage();\n  } else {\n    window.open(chrome.runtime.getURL('options.html'));\n  }\n});</pre><p><h4>2、tabs API 的影响\n</h4>如果不在自己的选项卡中托管，对于 chromes.tabs 的使用有点影响：\n<br>\n<br>tabs.query 永远不会在扩展程序的选项页面URL中找到选项卡\n<br>打开选项页面时，tabs.onCreated 不会触发\n<br>选项页面加载状态更改时，不会触发 tabs.onUpdated。\n<br>tabs.connect 或 tabs.sendMessage 不能用于与选项页面通信\n<br>如果选项页面确实需要操作包含选项卡，则使用 runtime.connect 和 runtime.sendMessage 可以解决这些限制。\n<br>\n<br><h4>3、Message API\n</h4>如果扩展的选项页面使用 runtime.connect 或 runtime.sendMessage 发送消息，则不会设置发件人的选项卡，并且发件人的 URL 将是选项页面 URL。\n<br>\n<br><h4>4、Sizing\n</h4>嵌入选项页面应根据页面内容自动确定自己的大小，但是，对于某些类型的内容，嵌入式选项页面可能找不到合适的大小。\n<br>\n<br>对于根据窗口大小调整其内容形状的选项页面，此问题最常见。\n<br>\n<br>如果这是一个问题，请为选项页面提供固定的最小尺寸，以确保嵌入页面找到合适的大小。</p><p><br></p><p><br></p><p><br></p><p><br></p>"}}