{"sta":1,"data":{"subTitle":"pageAction 的 API 使用实例","content":"<h3>一、描述</h3><p>chrome.pageAction API 能够在 chrome 地址栏右边的 toolbar 上设置图标，表示能够在当前页面上进行的页面操作。<br>不过并不是所有的页面都能够使用，如果不能，icon 是灰色的。<br>page_action 的使用本身就是带条件的<br><blockquote>chrome 30 之后支持<br>需要在 manifest 中配置 page_action 字段</blockquote>比较简单的使用示例是：<br><blockquote>订阅 RSS<br>\n从页面的图片中制作一个幻灯片\n</blockquote>官方文档中，示例了一个 RSS 功能，如果该页面能够进行 RSS 订阅，则会显示亮色状态; 如果不能，则图标是灰色的<br>\n<br>一般是推荐使用 browser_action 以便于在任何页面都能够使用扩展程序\n<br>\n<br><h3>二、配置 Manifest</h3></p><pre>{\n    \"name\": \"Getting Started Example\",\n    \"version\": \"1.0\",\n    \"description\": \"Build an Extension!\",\n    \"permissions\": [\"storage\", \"declarativeContent\", \"contextMenus\"],\n    \"optional_permissions\": [ \"tabs\"],\n    \"background\": {\n      \"scripts\": [\"background.js\"],\n      \"persistent\": false\n    },\n    \"page_action\": {\n      \"default_icon\": {                   \n        \"16\": \"images/icon16.png\",          \n        \"24\": \"images/icon24.png\",        \n        \"32\": \"images/icon32.png\"           \n      },\n      \"default_title\": \"Google Mail\",     \n      \"default_popup\": \"popup.html\"     \n    },\n    \"manifest_version\": 2\n  }</pre><p><h3>三、使用 page_action\n</h3><h4>1、 注意事项\n</h4><blockquote>如果只是对某个（或者某几个）页面才起作用的时候，考虑使用 page_action ，否则考虑使用 brwoser_action<br>\n不要频繁的对 icon 进行操作\n</blockquote><h4>2、API 列表\n</h4><blockquote>show − chrome.pageAction.show(integer tabId, function callback)<br>\nhide − chrome.pageAction.hide(integer tabId, function callback)<br>\nsetTitle − chrome.pageAction.setTitle(object details, function callback)<br>\ngetTitle − chrome.pageAction.getTitle(object details, function callback)<br>\nsetIcon − chrome.pageAction.setIcon(object details, function callback)<br>\nsetPopup − chrome.pageAction.setPopup(object details, function callback)<br>\ngetPopup − chrome.pageAction.getPopup(object details, function callback)\n</blockquote><h3>四、API 使用示例\n</h3>说明：<br>大部分 pageAction 的操作都是需要请求 tab.id，为了简化，我直接申请了 tabs 这个权限，并且获取当前 active 状态的 tab.id，因此每次点击更新扩展程序按钮，再选择打开 背景页 就会激活 pageAction\n<br>\n<br><h4>1、chrome.pageAction.show()\n</h4>主要用来显示 page action 的 icon，当条件触发的时候，才会显示扩展程序激活状态。<br><blockquote>当扩展程序 install 之后，通过 chrome.tabs.query 获取 tab，拿到的是 currentWindow 的 active 的 tab，然后再激活扩展程序。&nbsp;</blockquote></p><pre>// background.js \nchrome.runtime.onInstalled.addListener(() =&gt; {\n    chrome.tabs.query({currentWindow: true, active : true}, (tabArr) =&gt; {\n        console.log(tabArr);\n        const activeTab = tabArr[0];\n        if (!activeTab) {\n            console.log('没有拿到 tab')\n        }\n        chrome.pageAction.show(activeTab.id, () =&gt; {\n            console.log('激活成功');\n        });   \n    })\n});</pre><p>效果如下，同时下面列出了拿到的 tab 信息：</p><p><img src=\"/app/json/applets/chrome/imgs/27.jpg\" style=\"max-width:100%;\"></p><p>而此时也能够打开扩展程序：\n<br>\n</p><p><h4>2、chrome.pageAction.hide()\n</h4>激活 pageAction 之后我在 popup.html 中加了两个按钮，分别能够激活和取消激活扩展程序，这时候，操作都是在 popup.js 中处理的</p><pre>// popup.js\n\nbutton2.onclick = () =&gt; {\n    chrome.tabs.query({currentWindow: true, active : true}, (tabArr) =&gt; {\n        const activeTab = tabArr[0];\n        if (!activeTab) {\n            console.log('Fail: no tab!')\n        }\n        chrome.pageAction.hide(activeTab.id, () =&gt; {\n            console.log('hide success');\n        });   \n    })\n}</pre><p><h4>3、chrome.pageAction.setTitle(object details, function callback)\n</h4>设置 title 的 API 同样需要指定 tab，不过 setTitle 并不关心扩展程序的 pageAction 在目标的 tab 中是否是激活状态的。\n<br>\n<br>比如下面的代码， 我获取了所有当前的 tab，并且每个 tab 都设置了不同的 title。</p><pre>button3.onclick = () =&gt; {\n    chrome.tabs.query({}, (tabArr) =&gt; {\n        Array.isArray(tabArr) &amp;&amp; tabArr.forEach((item ,index) =&gt; {\n            chrome.pageAction.setTitle({\n                tabId: item.id,\n                title: `new pageAction title ---- ${index}`\n            }, () =&gt; {\n                console.log(\"setTitle Successed! tabId is: \" + item.id)\n            });\n        })\n    })\n}</pre><p>从结果中也可以发现，即使 tab 是非激活状态，也能够进行 setTtitle</p><p><h4>其他 API\n</h4>没有列出来的 API 基本的使用也是一样的，就不重复了。</p><p><img src=\"/app/json/applets/chrome/imgs/28.jpg\" style=\"max-width:100%;\"></p><p><br></p><p><br></p><p><br></p><p><br></p>"}}