{"sta":1,"data":{"subTitle":"chrome扩展开发基本指南","content":"<h3>一、说明</h3><p>extensions 是由不同的组件（这些组件都是为了同一个目的）构成的。这些组件包括如下几种：<br><blockquote>background scripts（运行在后台的脚本）<br>\ncontent scripts（运行在页面的逻辑脚本）<br>\noptions page （页面）<br>\nui elements（UI 元素）<br>\n各种逻辑文件\n</blockquote>上面的这些组件取决于 extensions 的功能，不一定全部都要拥有<br>extensions 使用 web 的开发技术区构建：HTML / CSS / JavaScript\n<br>\n<br><h3>二、创建 manifest.json\n</h3>extension 必须依赖 manifest.json 开始：</p><pre>{\n    \"name\": \"Getting Started Example\",\n    \"version\": \"1.0\",\n    \"description\": \"Build an Extension!\",\n    \"manifest_version\": 2\n}</pre><p><h3>三、增加指令 background scripts\n</h3>虽然已经安装了扩展程序，不过它没有任何的指令。我们可以通过创建 background.js 文件然后放在扩展程序的目录中来运行这个 background.js。<br>background scripts 和其他的 component 必须在 mainifest.json 中说明，注册 background script 会告诉扩展程序需要引用那个文件，以及这个文件的行为方式。</p><pre>{\n    \"name\": \"Getting Started Example\",\n    \"version\": \"1.0\",\n    \"description\": \"Build an Extension!\",\n    \"background\": {\n      \"scripts\": [\"background.js\"],\n      \"persistent\": false\n    },\n    \"manifest_version\": 2\n}</pre><p>现在我们的扩展程序已经知道包含一个非持久性的后台脚本，（注意 persistent: false 的配置选项），扩展程序会扫描已经注册的脚本文件（比如 background.js）并且查找它需要坚挺的重要的事件。\n<br>\n<br>我们的扩展程序一旦安装，就需要来自持久变量的信息，首先会在后台脚本中包含 runtime.onInstalled 的侦听事件。在 onInstalled 事件监听里面，扩展程序使用存储 API 设置了一个 value，然后能够允许多个扩展程序的 component 去访问或者 update。\n<br>\n<br>background.js 代码如下：</p><pre>chrome.runtime.onInstalled.addEventListener(() =&gt; {\n    chrome.storage.sync.set({color: 'red'}, () =&gt; {\n        console.log('color is red');\n    });\n});</pre><pre>上面的代码中，使用了 storage 权限，chrome 扩展开发中，涉及到 API 的使用，必须要在 manifest.json 的 permissions字段中注册才能使用。</pre><pre>{\n    \"name\": \"Getting Started Example\",\n    \"version\": \"1.0\",\n    \"description\": \"Build an Extension!\",\n    \"permissions\": [\"storage\"],\n    \"background\": {\n      \"scripts\": [\"background.js\"],\n      \"persistent\": false\n    },\n    \"manifest_version\": 2\n}</pre><p>上面的工作做完了之后，可以回到 chrome 的扩展页，然后重新加载扩展程序，这时候会出来一个【查看视图 背景页】</p><p><img src=\"/app/json/applets/chrome/imgs/1.jpg\" style=\"max-width:100%;\" class=\"\"></p><p>点击【查看视图】就会有 console 结果</p><p><h3>四、UI 用户界面\n</h3>Chrome 的扩展程序拥有多种形式的用户界面，最简单的自然是 popup 类型，这里创建一个 popup.html 的页面，通过 button 来修改背景色。</p><pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n    &lt;style&gt;\n        button {\n          height: 30px;\n          width: 30px;\n          outline: none;\n        }\n      &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;button id=\"changeColor\"&gt;&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre><p>和 background script 一样，页面也需要在 manifest.json 中配置指定相关的文件：</p><pre>{\n    \"name\": \"Getting Started Example\",\n    \"version\": \"1.0\",\n    \"description\": \"Build an Extension!\",\n    \"permissions\": [\"storage\"],\n    \"background\": {\n      \"scripts\": [\"background.js\"],\n      \"persistent\": false\n    },\n    \"page_action\": {\n        \"default_popup\": \"popup.html\"\n    },\n    \"manifest_version\": 2\n  }</pre><p>page_action 这个字段除了指定弹出页面地址外，还可以指定 default_icon，也就是扩展程序的 icon，可以指定不同分辨率的大小，配置是个对象，如果是字符串，则就使用一个 icon.比如下面的配置：</p><pre>{\n    \"name\": \"Getting Started Example\",\n    \"version\": \"1.0\",\n    \"description\": \"Build an Extension!\",\n    \"permissions\": [\"storage\"],\n    \"background\": {\n      \"scripts\": [\"background.js\"],\n      \"persistent\": false\n    },\n    \"page_action\": {\n        \"default_popup\": \"popup.html\",\n        \"default_icon\": {\n            \"16\": \"images/get_started16.png\",\n            \"32\": \"images/get_started32.png\",\n            \"48\": \"images/get_started48.png\",\n            \"128\": \"images/get_started128.png\"\n        }\n    },\n    \"manifest_version\": 2\n  }</pre><p>除了上面配置的控制栏上的图标外，还可以配置在扩展程序管理页、权限警告的提示以及 favicon 上的图标，可以在 icons 字段中配置：</p><pre>{\n    \"name\": \"Getting Started Example\",\n    \"version\": \"1.0\",\n    \"description\": \"Build an Extension!\",\n    \"permissions\": [\"storage\"],\n    \"background\": {\n      \"scripts\": [\"background.js\"],\n      \"persistent\": false\n    },\n    \"page_action\": {\n        \"default_popup\": \"popup.html\",\n        \"default_icon\": {\n            \"16\": \"images/get_started16.png\",\n            \"32\": \"images/get_started32.png\",\n            \"48\": \"images/get_started48.png\",\n            \"128\": \"images/get_started128.png\"\n        }\n    },\n    \"icons\": {\n        \"16\": \"images/get_started16.png\",\n        \"32\": \"images/get_started32.png\",\n        \"48\": \"images/get_started48.png\",\n        \"128\": \"images/get_started128.png\"\n    },\n    \"manifest_version\": 2\n  }</pre><p><img src=\"/app/json/applets/chrome/imgs/2.jpg\" style=\"max-width:100%;\"></p><p>可以看到，配置完 icons 之后，可以发现在管理页上我们已经有一个 logo 了。\n<br>\n<br>如果子阿哥时候重新加载扩展程序，它会有一个灰色图标，不过没有任何功能上的差异。因为在 manifest 中声明了page_action, 所以扩展程序可以告诉浏览器用户什么时候能够和 popup.html 进行交互。\n<br>\n<br>可以使用 runtime.inInstalled 监听器中的 declarativeContent API 将生命的规则添加到 background script。</p><pre>chrome.runtime.onInstalled.addListener(() =&gt; {\n    chrome.storage.sync.set({ color: 'red' }, () =&gt; {\n        console.log('color is red');\n    });\n});\n\nchrome.declarativeContent.onPageChanged.removeRules(undefined, () =&gt; {\n    chrome.declarativeContent.onPageChanged.addRules([{\n        conditions: [new chrome.declarativeContent.PageStateMatcher({\n            pageUrl: { hostEquals: 'ptbird.cn' }\n        })\n        ],\n        actions: [new chrome.declarativeContent.ShowPageAction()]\n    }]);\n});</pre><p>同样的， declarativeContent 也是需要权限声明的：</p><pre>{\n    \"name\": \"Getting Started Example\",\n  ...\n    \"permissions\": [\"declarativeContent\", \"storage\"],\n  ...\n  }</pre><p>上面代码的衣衣是，当用户浏览的网页中包含 ptbird.cn 这个 host 的时候,我们的扩展程序会被激活，同时，这个时候点击按钮，就会显示我们的 popup.html 的页面内容：</p><p><img src=\"/app/json/applets/chrome/imgs/3.jpg\" style=\"max-width:100%;\"></p><p>现在我们已经有了 UI 了，那我们接下来需要给这个 UI 的 button 增加一些颜色，创建一个 popup.js 文件：</p><pre>const changeColor = document.getElementById('changeColor');\n\nchrome.storage.sync.get('color', (data) =&gt; {\n    changeColor.style.backgroundColor = data.color;\n    changeColor.setAttribute('value', data.color);\n})</pre><p>然后在 popup.html 中引入 js 文件：</p><pre>&lt;body&gt;\n    &lt;button id=\"changeColor\"&gt;按钮&lt;/button&gt;\n&lt;/body&gt;\n&lt;script src='popup.js'&gt;&lt;/script&gt;\n&lt;/html&gt;</pre><p>刷新 extension 即可变成红色按钮</p><p><img src=\"/app/json/applets/chrome/imgs/4.jpg\" style=\"max-width:100%;\"></p><p><h3>五、交互逻辑</h3>目前为止我们的扩展程序已经知道弹出窗口应该可以给 ptbird.cn 的用户使用并显示彩色按钮，但是需要逻辑以进行进一步的用户交互，更新 popup.js 的代码如下：</p><pre>const changeColor = document.getElementById('changeColor');\n\nchrome.storage.sync.get('color', (data) =&gt; {\n    changeColor.style.backgroundColor = data.color;\n    changeColor.innerText = data.color;\n});\n\nchangeColor.onclick = (element) =&gt; {\n    const color = element.innerText;\n    console.log(res);\n    chrome.tabs.query({ active: true, currentWindow: truse }, (tabs) =&gt; {\n        chrome.tabs.executeScript(\n            tabs[0].id,\n            { code: `document.body.style.backgroundColor = \"${color}\"` }\n        )\n    })\n}</pre><p>上面代码中我们通过 xxx.onclick 的方式吧脚本注入到了 html 中，实际上这就是一开始提到的 inject scripts，\n<br>使用编程注入允许用户调用的内容脚本，而不是将不需要的代码自动插入到网页中。\n<br>\n<br>上面代码中使用了 activeTab 权限，同样需要在 mainifest 中声明：</p><pre>{\n    \"name\": \"Getting Started Example\",\n  ...\n    \"permissions\": [\"activeTab\", \"declarativeContent\", \"storage\"],\n  ...\n  }</pre><p><h3>六、提供用户选项\n</h3>目前，扩展程序仅允许用户将背景更改为绿色。通过包含选项页面，用户可以更好地控制扩展程序的功能，进一步自定义其浏览体验。\n<br>\n<br>我们创建一个 options.html：</p><pre>&lt;!DOCTYPE html&gt;\n  &lt;html&gt;\n    &lt;head&gt;\n      &lt;style&gt;\n        button {\n          height: 30px;\n          width: 30px;\n          outline: none;\n          margin: 10px;\n        }\n      &lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n      &lt;div id=\"buttonDiv\"&gt;\n      &lt;/div&gt;\n      &lt;div&gt;\n        &lt;p&gt;Choose a different background color!&lt;/p&gt;\n      &lt;/div&gt;\n    &lt;/body&gt;\n    &lt;script src=\"options.js\"&gt;&lt;/script&gt;\n  &lt;/html&gt;</pre><p>然后在 manifest 中配置 options_page　选项：</p><pre>\"options_page\": \"options.html\",</pre><p>然后在扩展程序管理页面，点击【详细信息】,然后滚动到下面会发现一个【扩展程序选项】的链接，虽然现在是个空的：</p><p><img src=\"/app/json/applets/chrome/imgs/5.jpg\" style=\"max-width:100%;\"></p><p>最后一步是添加选项逻辑。使用以下代码在扩展目录中创建名为 options.js的文件:</p><pre>const page = document.getElementById('buttonDiv');\n\nconst kButtonColors = ['#3aa757', '#e8453c', '#f9bb2d', '#4688f1'];\n\nfunction constructOptions(kButtonColors) {\n    for (let item of kButtonColors) {\n      let button = document.createElement('button');\n      button.style.backgroundColor = item;\n      button.addEventListener('click', function() {\n        chrome.storage.sync.set({color: item}, function() {\n          console.log('color is ' + item);\n        })\n      });\n      page.appendChild(button);\n    }\n  }\n  constructOptions(kButtonColors);</pre><p>提供四种颜色选项，然后使用onclick事件侦听器在选项页面上生成为按钮。\n<br>\n<br>当用户单击按钮时，它会更新扩展程序的全局存储中的颜色值。由于所有扩展文件都从全局存储中提取颜色信息，因此不需要更新其他值。</p><p><br></p><p><br></p>"}}