{"sta":1,"data":{"subTitle":"contextMenus增加页面右键选项菜单","content":"<h3>一、说明</h3><p>contextMenus API 能够增强扩展程序的能力到当前页面上，在当前页面的右键菜单中直接注入扩展程序的功能选项或者其他操作按钮。\n<br>\n<br><h3>二、权限说明\n</h3>如果需要使用 contextMenus，则需要在 manifest 中配置 permissions：\n<br></p><pre>{\n    \"name\": \"My extension\",\n    ...\n    \"permissions\": [\n        \"contextMenus\"\n    ],\n    \"icons\": {\n        \"16\": \"icon-bitty.png\",\n        \"48\": \"icon-small.png\",\n        \"128\": \"icon-large.png\"\n    },\n    ...\n}</pre><p><br></p><p><h3>三、 contextMenus 属性和方法说明\n</h3><h4>1、ContextType - 上下文类型\n</h4>这里 ContextType 是枚举类型，枚举了在什么样的上下文中要去注入右键菜单选项，可选值如下：\n<br><blockquote>\"all\",<br> \n\"page\",<br> \n\"frame\",<br> \n\"selection\",<br> \n\"link\",<br> \n\"editable\",<br> \n\"image\",<br>\n\"video\",<br> \n\"audio\",<br> \n\"launcher\",<br>\n\"browser_action\",<br> \n\"page_action\"\n</blockquote>\n<br><blockquote>contexts: ['link'],\n</blockquote>比如 link 是指在一个链接上使用右键菜单的时候，才会显示我们注入的菜单，google 翻译则是使用的 **selection**，选择了某些内容之后，右键菜单才会显示。\n<br>\n<br><h4>2、ItemType - 菜单类型\n</h4>目前支持几种不同的菜单类型，比如 checkbox 多选框，在用于配置的时候颇有用，或者是 radio 单选框。\n<br>\n<br>支持的菜单类型如下：\n<br><blockquote>\"normal\",<br> \n\"checkbox\",<br> \n\"radio\",<br> \n\"separator\"\n</blockquote>\n<br>type: 'radio'\n<br>\n<br><h4>3、create({}, ()=&gt;{}) 创建菜单\n</h4>chrome.contextMenus.create 方法用于向菜单中注入菜单，第一个参数是传入一个对象，对象中针对不同的场景，也需要传入不同的配置项。\n<br>\n<br>必传的选项中，需要传入 id，这是菜单的唯一选项。\n<br>\n<br><h4>4、update(id, {}, () =&gt; {})\n</h4>chrome.contextMenus.update 方法用于更新某个菜单选项，第一个参数需要传入菜单的 id，这个 id 在指定的时候就已经传入并且决定，是唯一的。\n<br>\n<br><h4>5、remove(id, () =&gt; {}) 移除菜单\n</h4>chrome.contextMenus.remove 方法用于移除某个菜单选项，第一个参数是创建菜单的 id\n<br>\n<br><h4>6、removeAll(() =&gt; {}) 移除所有菜单\n</h4><h4>7、onClicked click 监听\n</h4>对于按钮事件的点击，我们如果希望能够收到消息，这个时候就需要使用 chrome.contextMenus.onClicked.addEventListener((iknfo) =&gt; {}) 去监听，每次点击之后都会发过消息来。\n<br>\n<br>当然创建 contextMenus 的时候，配置项可以配置一个 onclick 方法，但是在 ItemType === page 的时候是不起作用的，必须通过事件监听\n<br>\n<br>不同类型的菜单，点击返回的内容也不尽相同\n<br>\n<br><h3>四、使用示例\n</h3><h4>1、创建一个普通菜单\n</h4></p><pre>button1.onclick = () =&gt; {\n    const options = {\n        type: 'normal',\n        id: '1',\n        title: 'demoMenu1',\n        visible: true,\n    }\n    chrome.contextMenus.create(options, () =&gt; {\n        alert(`Created Success, id:${options.id}`);\n    });\n}</pre><p><br></p><p>点击事件触发结果：\n<br></p><pre>{\n    \"editable\":false,\n    \"frameId\":0,\n    \"menuItemId\":\"1\",\n    \"pageUrl\":\"chrome://extensions/\"\n}</pre><p><h4>2、创建一个子菜单\n</h4>创建子菜单需要有 parentId，指定父菜单是谁。\n<br></p><pre>button2.onclick = () =&gt; {\n    const options = {\n        type: 'normal',\n        id: '1_2',\n        title: 'sub normal menu',\n        visible: true,\n        checked: true,\n        parentId: '1',\n    }\n    chrome.contextMenus.create(options, () =&gt; {\n        alert(`Created Success, id:${options.id}`);\n    });\n}</pre><p><br></p><p><h4>3、创建一个 checkbox 菜单\n</h4>checked: false 这个属性是可以指定默认是否选中的\n<br></p><pre>button3.onclick = () =&gt; {\n    const options = {\n        type: 'checkbox',\n        id: '1_3',\n        title: 'checkbox menu',\n        visible: true,\n        checked: false\n    }\n    chrome.contextMenus.create(options, () =&gt; {\n        alert(`Created Success, id:${options.id}`);\n    });\n}</pre><p><br></p><p>点击事件参数：<br>checked 能够接受到当前的选择状态\n<br></p><pre>{\n    \"checked\":false,\n    \"editable\":false,\n    \"frameId\":0,\n    \"menuItemId\":\"1_3\",\n    \"pageUrl\":\"chrome-extension://agcjhkjgcnpomgfclijgmcomdjicnfjb/popup.html\",\n    \"wasChecked\":true\n}</pre><p><br></p><p><h4>4、创建一个 radio 菜单\n</h4>checked: false 这个属性是可以指定默认是否选中的\n<br></p><pre>button4.onclick = () =&gt; {\n    const options = {\n        type: 'radio',\n        id: '1_4',\n        title: 'radio menu',\n        checked: true\n    }\n    chrome.contextMenus.create(options, () =&gt; {\n        alert(`Created Success, id:${options.id}`);\n    });\n}</pre><p><br></p><p>点击事件参数：\n<br></p><pre>{\n    \"checked\":true,\n    \"editable\":false,\n    \"frameId\":0,\n    \"menuItemId\":\"1_4\",\n    \"pageUrl\":\"chrome-extension://agcjhkjgcnpomgfclijgmcomdjicnfjb/popup.html\",\n    \"wasChecked\":true\n}</pre><p><br></p><p><h4>5、创建在 链接 上起作用的菜单\n</h4>通过 contexts: ['link'] 是一个 array 类型的配置选项\n<br></p><pre>button5.onclick = () =&gt; {\n    const options = {\n        type: 'normal',\n        contexts: ['link'],\n        id: '1_5',\n        title: 'menu on link',\n    }\n    chrome.contextMenus.create(options, () =&gt; {\n        alert(`Created Success, id:${options.id}`);\n    });\n}</pre><p><br></p><p>点击菜单事件参数：<br>在点击的时候，能够收到链接，从而做一些事情\n<br></p><pre>{\n    \"editable\":false,\n    \"frameId\":0,\n    \"linkUrl\":\"https://developer.chrome.com/extensions/contextMenus#type-ItemType\",\n    \"menuItemId\":\"1_5\",\n    \"pageUrl\":\"https://developer.chrome.com/extensions/contextMenus#type-ContextType\"\n}</pre><p><h4>6、移除某个菜单\n</h4>移除菜单需要传入菜单 id：\n<br></p><pre>button6.onclick = () =&gt; {\n    chrome.contextMenus.remove('1', () =&gt; {\n        alert('removed')\n    });\n}</pre><p><br></p><p><h4>7、移除所有菜单\n</h4>能够移除当前扩展程序注入的所有菜单\n<br></p><pre>button7.onclick = () =&gt; {\n    chrome.contextMenus.removeAll(() =&gt; {\n        alert('removed')\n    });\n}</pre><p><br></p><p>\n<br></p>"}}